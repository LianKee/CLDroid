<android.view.View: void set Alpha(float)> C1
<android.view.View: void setBackground(android.graphics.drawable.Drawable)> C1
<android.view.View: void setBackgroundColor(int)> C1
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)> C1
<android.view.View: void setBackgroundResource(int)> C1
<android.view.View: void setForeground(android.graphics.drawable.Drawable)> C1
<android.view.View: void setVisibility(int)> C1
<android.widget.ProgressBar: void setProgress(int)> C1
<android.widget.ProgressBar: void setProgress(int,boolean)> C1
<android.widget.ProgressBar: void incrementProgressBy(int)> C1
<android.widget.ProgressBar: void incrementSecondaryProgressBy(int)> C1
<android.widget.TextView: void setHint(java.lang.CharSequence)> C1
<android.widget.TextView: void setHint(int)> C1
<android.widget.TextView: void setInputExtras(int)> C1
<android.widget.TextView: setText(java.lang.CharSequence)> C1
<android.widget.TextView: setText(java.lang.CharSequence,android.widget.TextView.BufferType)> C1
<android.widget.TextView: setText(char[],int,int)> C1
<android.widget.TextView: setText(int)> C1
<android.widget.TextView: setText(int,android.widget.TextView.BufferType)> C1
<android.widget.TextView: setText(java.lang.CharSequence,android.widget.TextView.BufferType,boolean,int)> C1
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)> C1
<android.widget.TextView: void setHintTextColor(int)> C1
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)> C1 
<android.widget.TextView: void setPadding(int,int,int,int)> C1
<android.widget.TextView: void setPaddingRelative(int,int,int,int)> C1
<android.widget.TextView: void setTextColor(int)> C1
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)> C1
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)> C1
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)> C1
<android.widget.ImageView: void setImageIcon(android.graphics.drawable.Icon)> C1
<android.widget.ImageView: Runnable setImageIconAsync(android.graphics.drawable.Icon)> C1
<android.widget.ImageView: void setImageResource(int)> C1
<android.widget.ImageView: Runnable setImageResourceAsync(int)> C1
<android.widget.ImageView: void setImageURI(android.net.Uri)> C1
<android.widget.ImageView: Runnable setImageURIAsync(android.net.Uri)> C1
<android.widget.ImageView: void setAlpha(int)> C1
<android.widget.ImageView: void setImageAlpha(int)> C1
<android.app.AlertDialog: void setMessage(java.lang.CharSequence)> C1
<android.app.AlertDialog: Builder setMessage(java.lang.CharSequence)> C1
<android.app.AlertDialog: Builder setMessage(int)> C1
<android.app.AlertDialog: void setTitle(java.lang.CharSequence)> C1
<android.app.AlertDialog: Builder setTitle(java.lang.CharSequence)> C1
<android.app.AlertDialog: Builder setTitle(int)> C1
<android.app.AlertDialog: void setView(android.view.View)> C1
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)> C1
<android.app.AlertDialog: Builder setView(int)> C1
<android.app.AlertDialog: Builder setView(View)> C1
<android.app.AlertDialog: Builder setView(android.view.View,int,int,int,int)> C1
<android.app.AlertDialog: void setCustomTitle(android.view.View)> C1
<android.app.AlertDialog: Builder setCustomTitle(android.view.View)> C1
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)> C1
<android.app.AlertDialog: void setIcon(int)> C1
<android.app.AlertDialog: Builder setIcon(android.graphics.drawable.Drawable)> C1
<android.app.AlertDialog: Builder setIcon(int)> C1
<android.app.AlertDialog: Builder setNegativeButton(int,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setPositiveButton(int,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setNeutralButton(int,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setSingleChoiceItems(android.database.Cursor,int,String,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setSingleChoiceItems(int,int,android.content.DialogInterface.OnClickListener)> C1
<android.app.AlertDialog: Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface.OnmultiChoiceClickListener)> C1
<android.app.AlertDialog: Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface.OnmultiChoiceClickListener)> C1
<android.app.AlertDialog: Builder setMultiChoiceItems(android.database.Cursor,String,String,android.content.DialogInterface.OnmultiChoiceClickListener)> C1
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Metrix,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawPicture(android.graphics.Picture)> C1
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)> C1
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)> C1
<android.graphics.Canvas: void drawColor(int)> C1
<android.graphics.Canvas: void drawColor(long)> C1
<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff)> C1
<android.graphics.Canvas: void drawColor(int,android.graphics.BlendMode)> C1
<android.graphics.Canvas: void drawColor(long,android.graphics.BlendMode)> C1
<android.graphics.Canvas: void drawARGB(int,int,int,int)> C1
<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)> C1
<android.graphics.Canvas: void clipPath(android.graphics.Path)> C1
<android.graphics.Canvas: void clipRect(android.graphics.Rect)> C1
<android.graphics.Canvas: void clipRect(android.graphics.RectF)> C1
<android.graphics.Canvas: void clipRect(float,float,float,float)> C1 
<android.graphics.Canvas: void clipRect(int,int,int,int)> C1
<android.graphics.Canvas: void drawVertices(android.graphics.Canvas.VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)> C1
<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)> C1
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> C1
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)> C1
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> C2
<android.media.MediaPlayer: void setDataSource(java.lang.String)> C2
<android.media.MediaPlayer: void setDataSource(android.context.Context,android.net.Uri)> C2
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)> C2
<android.media.MediaPlayer: void setDataSource(android.media.MediaDataSource)> C2
<android.media.MediaPlayer: void setDataSource(android.context.Context,android.net.Uri,java.util.Map<String,String>)> C2
<android.media.MediaPlayer: void setDataSource(android.context.Context,android.net.Uri,java.util.Map<String,String>,java.util.List<java.net.HttpCookie>)> C2
<android.media.MediaPlayer: void setDataSource(android.content.res.AssetFileDescriptor)> C2
<android.media.SoundPool: int load(android.context.Context,int,int)> C2
<android.media.SoundPool: int load(java.lang.String,int)> C2
<android.media.SoundPool: int load(android.content.res.AssetFileDescriptor,int)> C2
<android.media.SoundPool: int load(java.io.FileDescriptor,long,long,int)> C2
<android.media.AudioTrack: int write(byte[],int,int)> C2
<android.media.AudioTrack: int write(byte[],int,int,int)> C2
<android.media.AudioTrack: int write(short[],int,int)> C2
<android.media.AudioTrack: int write(short[],int,int,int)> C2
<android.media.AudioTrack: int write(float[],int,int,int)> C2
<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)> C2
<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int,long)> C2
<android.media.AsyncPlayer: void play(android.context.Context,android.net.Uri,boolean,int)> C2
<android.media.AsyncPlayer: void play(android.context.Context,android.net.Uri,boolean,android.media.AudioAttributes)> C2
<android.media.AudioTrack: boolean loadJetFile(String)> C2
<android.media.AudioTrack: boolean loadJetFile(android.content.res.AssetFileDescriptor)> C2
<android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)> C2
<android.media.Ringtone: void setLooping(boolean)> C2
<android.media.Ringtone: void setVolume(float)> C2
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)> C2
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.context.Context,android.net.Uri)> C2
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.context.Context,android.net.Uri,android.media.VolumeShaper.Configuration)> C2
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.context.Context,android.net.Uri,int)> C2
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)> C2
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)> C2
<android.media.Ringtone: android.net.Uri getRingtoneUri(int)> C2
<android.media.Ringtone: void setActualDefaultRingtoneUri(android.context.Context,int,android.net.Uri)> C2
<io.vov.vitamio.MediaPlayer: void <init>(android.context.Context)> C2
<io.vov.vitamio.MediaPlayer: void <init>(android.context.Context,boolean)> C2
<io.vov.vitamio.MediaPlayer: void setDataSource(java.lang.String)> C2
<io.vov.vitamio.MediaPlayer: void setDataSource(android.context.Context,java.net.Uri)> C2
<io.vov.vitamio.MediaPlayer: void setDataSource(android.context.Context,java.net.Uri,java.util.Map<java.lang.String,java.lang.String>)> C2
<io.vov.vitamio.MediaPlayer: void setDataSource(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)> C2
<io.vov.vitamio.MediaPlayer: void setDataSource(java.lang.String,java.lang.String[],java.lang.String[])> C2
<io.vov.vitamio.widget.VideoView: void setVideoPath(java.lang.String)> C2
<io.vov.vitamio.widget.VideoView: void setVideoURI(java.net.Uri)> C2
<io.vov.vitamio.widget.VideoView: void setVideoURI(java.net.Uri,java.util.Map<java.lang.String,java.lang.String>)> C2
<android.media.VideoView: void setVideoPath(string)> C2
<android.media.VideoView: void setVideoURI(android.net.Uri,java.util.Map<String,String>)> C2
<io.vov.vitamio.MediaPlayer: void <init>()> C2
<io.vov.vitamio.MediaPlayer: void prepareAsync()> C2
<tv.danmaku.ijk.media.player.IjkMediaPlayer: void setDataSource(android.context.Context,java.net.Uri)> C2
<tv.danmaku.ijk.media.player.IjkMediaPlayer: void setDataSource(android.content.Context,java.net.Uri,java.util.Map<java.lang.String,java.lang.String>)> C2
<tv.danmaku.ijk.media.player.IjkMediaPlayer: void setDataSource(java.lang.String)> C2
<tv.danmaku.ijk.media.player.IjkMediaPlayer: void setDataSource(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)> C2
<tv.danmaku.ijk.media.player.IjkMediaPlayer: void setDataSource(java.io.FileDescriptor)> C2
<tv.danmaku.ijk.media.player.IjkMediaPlayer: void setDataSource(tv.danmaku.ijk.media.player.misc.IMediaDataSource)> C2
<tv.danmaku.ijk.media.player.IjkMediaPlayer: void start()> C2
<tv.danmaku.ijk.media.player.IjkMediaPlayer: void pause()> C2
<android.media.VideoView: void setVideoPath(java.lang.string)> C2
<android.media.VideoView: void setVideoURI(android.net.Uri)> C2
<android.media.VideoView: void setVideoURI(android.net.Uri,java.util.Map<java.lang.String,java.lang.String>)> C2
<java.net.Socket: void connect(java.net.SocketAddress)> C4
<java.net.Socket: void connect(java.net.SocketAddress,int)> C4
<java.net.Socket: java.io.OutputStream getOutputStream()> C4
<java.net.Socket: java.io.InputStream getInputStream()> C4
<java.net.URL: java.net.URLConnection openConnection()> C4
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> C4
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> C4
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)> C4
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)> C4
<java.net.URL: void <init>(java.lang.String)> C4
<java.net.URL: void <init>(java.net.URL,java.lang.String)> C4
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)> C4
<java.net.URL: java.io.InputStream openStream()> C4
<java.net.URLConnection: void connect()> C4
<java.net.URLConnection: void setConnectTimeout(int)> C4
<java.net.URLConnection: void setReadTimeout(int)> C4
<java.net.URLConnection: java.io.OutputStream getOutputStream()> C4
<java.net.URLConnection: java.io.InputStream getInputStream()> C4
<java.net.HttpURLConnection: void setRequestMethod(String)> C4
<java.net.HttpURLConnection: int getResponseCode()> C4
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> C4
<javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)> C4
<javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)> C4
<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)> C4
<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)> C4
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)> C4
<android.webkit.WebView: void loadUrl(java.lang.String)> C4
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)> C4
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> C4
<okhttp3.internal.connection.RealCall: okhttp3.Response execute()> C4
<okhttp3.Call: okhttp3.Response execute()> C4
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> C4
<okhttp3.internal.connection.RealCall: void enqueue(okhttp3.Callback)> C4
<okhttp3.Call: void enqueue(okhttp3.Callback)> C4
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> C4
<com.google.firebase.perf.network.FirebasePerfOkHttpClient: void enqueue(okhttp3.Call,okhttp3.Callback)> C4
<com.google.firebase.perf.network.FirebasePerfOkHttpClient: okhttp3.Response execute(okhttp3.Call)> C4
<retrofit2.Call: void enqueue(retrofit2.Callback)> C4
<com.android.volley.Response parseNetworkResponse(com.android.volley.NetworkResponse)> C4
<com.android.volley.Request: com.android.volley.Response<T> parseNetworkResponse(com.android.volley.NetworkResponse)> C4
<com.android.volley.toolbox.JsonArrayRequest: com.android.volley.Response<org.json.JSONArray> parseNetworkResponse(com.android.volley.NetworkResponse)> C4
<com.android.volley.toolbox.StringRequest: com.android.volley.Response<java.lang.String> parseNetworkResponse(com.android.volley.NetworkResponse)> C4
<com.android.volley.toolbox.JsonRequest: com.android.volley.Response<T> parseNetworkResponse(com.android.volley.NetworkResponse)> C4
<com.android.volley.toolbox.StringRequest: void <init>(int,java.lang.String,com.android.volley.Response.Listener<java.lang.String>,com.android.volley.Response.ErrorListener)> C4
<com.android.volley.toolbox.StringRequest: void <init>(java.lang.String,com.android.volley.Response.Listener<java.lang.String>,com.android.volley.Response.ErrorListener)> C4
<com.android.volley.toolbox.JsonObjectRequest: void <init>(int,java.lang.String,org.json.JSONObject,com.android.volley.Response.Listener<org.json.JSONObject>,com.android.volley.Response.ErrorListener)> C4
<com.android.volley.toolbox.JsonObjectRequest: void <init>(java.lang.String,org.json.JSONObject,com.android.volley.Response.Listener<org.json.JSONObject>,com.android.volley.Response.ErrorListener)> C4
<com.android.volley.toolbox.JsonArrayRequest: void <init>(int,java.lang.String,org.json.JSONArray,com.android.volley.Response.Listener<org.json.JSONArray>,com.android.volley.Response.ErrorListener)> C4
<com.android.volley.toolbox.JsonArrayRequest: void <init>(java.lang.String,com.android.volley.Response.Listener<org.json.JSONArray>,com.android.volley.Response.ErrorListener)> C4
<org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient: java.util.concurrent.Future execute(org.apache.hc.core5.http.HttpHost,org.apache.hc.core5.http.nio.AsyncRequestProducer,org.apache.hc.core5.http.nio.AsyncResponseConsumer,org.apache.hc.core5.http.nio.HandlerFactory<org.apache.hc.core5.http.nio.AsyncPushConsumer>,org.apache.hc.core5.http.protocol.HttpContext,org.apache.hc.core5.concurrent.FutureCallback)> C4
<org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient: java.util.concurrent.Future execute(org.apache.hc.core5.http.nio.AsyncRequestProducer,org.apache.hc.core5.http.nio.AsyncResponseConsumer,org.apache.hc.core5.http.nio.HandlerFactory<org.apache.hc.core5.http.nio.AsyncPushConsumer>,org.apache.hc.core5.http.protocol.HttpContext,org.apache.hc.core5.concurrent.FutureCallback)> C4
<org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient: java.util.concurrent.Future execute(org.apache.hc.core5.http.nio.AsyncRequestProducer,org.apache.hc.core5.http.nio.AsyncResponseConsumer,org.apache.hc.core5.http.protocol.HttpContext,org.apache.hc.core5.concurrent.FutureCallback)> C4
<org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient: java.util.concurrent.Future execute(org.apache.hc.core5.http.nio.AsyncRequestProducer,org.apache.hc.core5.http.nio.AsyncResponseConsumer,org.apache.hc.core5.concurrent.FutureCallback)> C4
<org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient: java.util.concurrent.Future execute(org.apache.hc.client5.http.async.methods.SimpleHttpRequest,org.apache.hc.core5.http.protocol.HttpContext,org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.async.methods.SimpleHttpResponse>)> C4
<org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient: java.util.concurrent.Future execute(org.apache.hc.client5.http.async.methods.SimpleHttpRequest,org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.async.methods.SimpleHttpResponse>)> C4
<org.apache.hc.client5.http.impl.classic.CloseableHttpClient: org.apache.hc.client5.http.impl.classic.CloseableHttpResponse execute(org.apache.hc.core5.http.HttpHost,org.apache.hc.core5.http.ClassicHttpRequest,org.apache.hc.core5.http.protocol.HttpContext)> C4
<org.apache.hc.client5.http.impl.classic.CloseableHttpClient: org.apache.hc.client5.http.impl.classic.CloseableHttpResponse execute(org.apache.hc.core5.http.ClassicHttpRequest,org.apache.hc.core5.http.protocol.HttpContext)> C4
<org.apache.hc.client5.http.impl.classic.CloseableHttpClient: org.apache.hc.client5.http.impl.classic.CloseableHttpResponse execute(org.apache.hc.core5.http.ClassicHttpRequest)> C4
<org.apache.hc.client5.http.impl.classic.CloseableHttpClient: org.apache.hc.client5.http.impl.classic.CloseableHttpResponse execute(org.apache.hc.core5.http.HttpHost,org.apache.hc.core5.http.ClassicHttpRequest)> C4
<org.apache.hc.client5.http.impl.classic.CloseableHttpClient: java.lang.Object execute(org.apache.hc.core5.http.ClassicHttpRequest,org.apache.hc.core5.http.io.HttpClientResponseHandler)> C4
<org.apache.hc.client5.http.impl.classic.CloseableHttpClient: java.lang.Object execute(org.apache.hc.core5.http.ClassicHttpRequest,org.apache.hc.core5.http.protocol.HttpContext,org.apache.hc.core5.http.io.HttpClientResponseHandler)> C4
<org.apache.hc.client5.http.impl.classic.CloseableHttpClient: java.lang.Object execute(org.apache.hc.core5.http.HttpHost,org.apache.hc.core5.http.ClassicHttpRequest,org.apache.hc.core5.http.protocol.HttpContext,org.apache.hc.core5.http.io.HttpClientResponseHandler)> C4
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler)> C4
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext)> C4
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler)> C4
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext)> C4
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest)> C4
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)> C4
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> C4
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)> C4
<org.apache.http.impl.client.CloseableHttpClient: java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler)> C4
<org.apache.http.impl.client.CloseableHttpClient: java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext)> C4
<org.apache.http.impl.client.CloseableHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler)> C4
<org.apache.http.impl.client.CloseableHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext)> C4
<org.apache.http.impl.client.CloseableHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest)> C4
<org.apache.http.impl.client.CloseableHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)> C4
<org.apache.http.impl.client.CloseableHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> C4
<org.apache.http.impl.client.CloseableHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)> C4
<org.apache.http.impl.client.CloseableHttpClient: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest)> C4
<org.apache.http.impl.client.CloseableHttpClient: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)> C4
<org.apache.http.impl.client.CloseableHttpClient: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> C4
<org.apache.http.impl.client.CloseableHttpClient: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)> C4
<com.facebook.ads.InterstitialAd: void loadAd()> C4-AD
<com.facebook.ads.InterstitialAd: void loadAd(com.facebook.ads.InterstitialAd.InterstitialLoadAdConfig)> C4-AD
<com.facebook.ads.InterstitialAd: void show()> C4-AD
<com.facebook.ads.InterstitialAd: void show(com.facebook.ads.InterstitialAd.InterstitialShowAdConfig)> C4-AD
<com.facebook.ads.InterstitialAd: void <init>(android.content.Context,java.lang.String)> C4-AD
<com.facebook.ads.AdView: void <init>(android.content.Context,java.lang.String,com.facebook.ads.AdSize)> C4-AD
<com.facebook.ads.AdView: void <init>(android.content.Context,java.lang.String,java.lang.String)> C4-AD
<com.facebook.ads.AdView: void loadAd()> C4-AD
<com.facebook.ads.AdView: void loadAd(com.facebook.ads.AdView.AdViewLoadConfig)> C4-AD
<com.facebook.ads.RewardedVideoAd: void <init>(android.content.Context,java.lang.String,java.lang.String)> C4-AD
<com.facebook.ads.RewardedVideoAd: void loadAd()> C4-AD
<com.facebook.ads.RewardedVideoAd: void loadAd(com.facebook.ads.RewardedVideoAd.RewardedVideoLoadAdConfig)> C4-AD
<com.facebook.ads.RewardedVideoAd: void show()> C4-AD
<com.facebook.ads.RewardedVideoAd: void show(com.facebook.ads.RewardedVideoAd.RewardedVideoShowAdConfig)> C4-AD
<com.facebook.ads.RewardedInterstitialAd: void <init>(android.content.Context,java.lang.String)> C4-AD
<com.facebook.ads.RewardedInterstitialAd: void loadAd()> C4-AD
<com.facebook.ads.RewardedInterstitialAd: void loadAd(com.facebook.ads.RewardedInterstitialAd.RewardedInterstitialLoadAdConfig)> C4-AD
<com.facebook.ads.RewardedInterstitialAd: void show()> C4-AD
<com.facebook.ads.RewardedInterstitialAd: void show(com.facebook.ads.RewardedInterstitialAd.RewardedInterstitialShowAdConfig)> C4-AD
<com.facebook.ads.NativeAd: void <init>(android.content.Context,java.lang.String)> C4-AD
<com.facebook.ads.NativeAd: void <init>(android.content.Context,com.facebook.ads.internal.api.NativeAdBaseApi)> C4-AD
<com.facebook.ads.NativeAd: void <init>(android.content.Context,com.facebook.ads.NativeAdBase)> C4-AD
<com.facebook.ads.NativeAd: void loadAd()> C4-AD
<com.facebook.ads.NativeAd: void loadAd(com.facebook.ads.NativeAdBase.NativeLoadAdConfig nativeLoadAdConfig)> C4-AD
<com.google.android.gms.ads.AdView: void loadAd(com.google.android.gms.ads.AdRequest)> C4-AD
<com.google.android.gms.ads.interstitial.InterstitialAd: void load(android.content.Context,java.lang.String,com.google.android.gms.ads.AdRequest,com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback)> C4-AD
<com.google.android.gms.ads.rewarded.RewardedAd: void loadAd(com.google.android.gms.ads.AdRequest,com.google.android.gms.ads.interstitial.AdLoadCallback)> C4-AD
<com.google.android.gms.ads.reward.RewardedVideoAd: void loadAd(java.lang.String,com.google.android.gms.ads.AdRequest)> C4-AD
<com.unity3d.ads.UnityAds: void load(java.lang.String)> C4-AD
<com.unity3d.ads.UnityAds: void load(java.lang.String,com.unity3d.ads.IUnityAdsLoadListener)> C4-AD
<com.unity3d.ads.UnityAds: void load(java.lang.String,com.unity3d.ads.UnityAdsLoadOptions,com.unity3d.ads.IUnityAdsLoadListener)> C4-AD
<com.unity3d.ads.UnityAds: void show(android.app.Activity)> C4-AD
<com.unity3d.ads.UnityAds: void show(android.app.Activity,java.lang.String)> C4-AD
<com.unity3d.ads.UnityAds: void show(android.app.Activity,java.lang.String,com.unity3d.ads.IUnityAdsShowListener)> C4-AD
<com.unity3d.ads.UnityAds: void show(android.app.Activity,java.lang.String,com.unity3d.ads.UnityAdsShowOptions)> C4-AD
<com.unity3d.ads.UnityAds: void show(android.app.Activity,java.lang.String,com.unity3d.ads.UnityAdsShowOptions,com.unity3d.ads.IUnityAdsShowListener)> C4-AD
<android.os.image.DynamicSystemManager: boolean remove()> C5
<android.os.UserManager: void addUserRestrictionsListener(android.os.IUserRestrictionsListener)> C5
<android.app.WallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)> C5
<android.app.role.RoleManager: boolean addRoleHolderFromController(java.lang.String,java.lang.String)> C5
<android.app.role.RoleManager: boolean removeRoleHolderFromController(java.lang.String,java.lang.String)> C5
<android.app.role.RoleManager: void setRoleNamesFromController(java.util.List)> C5
<android.os.PowerManager: void suppressAmbientDisplay(java.lang.String,boolean)> C5
<android.os.PowerManager: boolean setDynamicPowerSaveHint(boolean,int)> C5
<android.os.PowerManager: void wakeUp(long)> C5
<android.os.PowerManager: void userActivity(long,int,int)> C5
<android.os.PowerManager: void userActivity(long,boolean)> C5
<android.os.PowerManager: void wakeUp(long,int,java.lang.String)> C5
<android.os.PowerManager: void reboot(java.lang.String)> C5
<android.os.PowerManager: void wakeUp(long,java.lang.String)> C5
<android.os.PowerManager: boolean setAdaptivePowerSaveEnabled(boolean)> C5
<android.os.PowerManager: boolean setPowerSaveModeEnabled(boolean)> C5
<android.os.PowerManager: boolean forceSuspend()> C5
<android.os.PowerManager: void dream(long)> C5
<android.os.PowerManager: void setDozeAfterScreenOff(boolean)> C5
<android.os.PowerManager: void goToSleep(long,int,int)> C5
<android.os.PowerManager: void rebootSafeMode()> C5
<android.os.PowerManager: void boostScreenBrightness(long)> C5
<android.os.PowerManager: void shutdown(boolean,java.lang.String,boolean)> C5
<android.os.PowerManager: void nap(long)> C5
<android.os.PowerManager: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)> C5
<android.os.PowerManager: void goToSleep(long)> C5
<android.hardware.ConsumerIrManager: void transmit(int,int[])> C5
<android.app.ActivityManager: void setProcessStateSummary(byte[])> C5
<android.app.ActivityManager: void setWatchHeapLimit(long)> C5
<android.app.ActivityManager: void registerHomeVisibilityObserver(android.app.HomeVisibilityObserver)> C5
<android.app.ActivityManager: void noteWakeupAlarm(android.app.PendingIntent,android.os.WorkSource,int,java.lang.String,java.lang.String)> C5
<android.app.ActivityManager: void setDeviceLocales(android.os.LocaleList)> C5
<android.app.ActivityManager: void setPersistentVrThread(int)> C5
<android.app.ActivityManager: void clearWatchHeapLimit()> C5
<android.app.ActivityManager: void broadcastStickyIntent(android.content.Intent,int,int)> C5
<android.app.ActivityManager: void noteAlarmFinish(android.app.PendingIntent,android.os.WorkSource,int,java.lang.String)> C5
<android.app.ActivityManager: void scheduleApplicationInfoChanged(java.util.List,int)> C5
<android.app.ActivityManager: void killProcessesWhenImperceptible(int[],java.lang.String)> C5
<android.app.ActivityManager: void broadcastStickyIntent(android.content.Intent,int)> C5
<android.app.ActivityManager: void clearGrantedUriPermissions(java.lang.String)> C5
<android.app.ActivityManager: void addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)> C5
<android.app.ActivityManager: void noteAlarmStart(android.app.PendingIntent,android.os.WorkSource,int,java.lang.String)> C5
<android.app.ActivityManager: void killUid(int,java.lang.String)> C5
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> C5
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)> C5
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)> C5
<android.app.DreamManager: void stopDream()> C5
<android.app.DreamManager: void startDream(android.content.ComponentName)> C5
<android.hardware.display.DisplayManager: void startWifiDisplayScan()> C5
<android.hardware.display.DisplayManager: void resumeWifiDisplay()> C5
<android.hardware.display.DisplayManager: void setSaturationLevel(float)> C5
<android.hardware.display.DisplayManager: void pauseWifiDisplay()> C5
<android.hardware.display.DisplayManager: void renameWifiDisplay(java.lang.String,java.lang.String)> C5
<android.hardware.display.DisplayManager: void setTemporaryAutoBrightnessAdjustment(float)> C5
<android.hardware.display.DisplayManager: void connectWifiDisplay(java.lang.String)> C5
<android.hardware.display.DisplayManager: void forgetWifiDisplay(java.lang.String)> C5
<android.hardware.display.DisplayManager: void stopWifiDisplayScan()> C5
<android.hardware.display.DisplayManager: void setTemporaryBrightness(float)> C5
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> C5
<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,java.lang.CharSequence,android.app.KeyguardManager$KeyguardDismissCallback)> C5
<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,android.app.KeyguardManager$KeyguardDismissCallback)> C5
<android.app.KeyguardManager: boolean setLock(int,byte[],int)> C5
<android.net.NetworkScoreManager: void disableScoring()> C5
<android.net.NetworkScoreManager: boolean requestScores(java.util.Collection)> C5
<android.net.NetworkScoreManager: void registerNetworkScoreCallback(int,int,java.util.concurrent.Executor,android.net.NetworkScoreManager$NetworkScoreCallback)> C5
<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,android.net.INetworkScoreCache)> C5
<android.net.NetworkScoreManager: boolean clearScores()> C5
<android.net.NetworkScoreManager: boolean requestScores(android.net.NetworkKey[])> C5
<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)> C5
<android.net.NetworkScoreManager: void unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)> C5
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback)> C5
<android.media.MediaRouter: void selectRouteInt(int,android.media.MediaRouter$RouteInfo,boolean)> C5
<android.media.MediaRouter: void removeCallback(android.media.MediaRouter$Callback)> C5
<android.media.MediaRouter: void removeRouteInt(android.media.MediaRouter$RouteInfo)> C5
<android.media.MediaRouter: void addRouteInt(android.media.MediaRouter$RouteInfo)> C5
<android.media.MediaRouter: void addUserRoute(android.media.MediaRouter$UserRouteInfo)> C5
<android.media.MediaRouter: void clearUserRoutes()> C5
<android.media.MediaRouter: void selectRoute(int,android.media.MediaRouter$RouteInfo)> C5
<android.media.MediaRouter: void rebindAsUser(int)> C5
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback,int)> C5
<android.media.MediaRouter: void removeUserRoute(android.media.MediaRouter$UserRouteInfo)> C5
<android.media.MediaRouter: void setRouterGroupId(java.lang.String)> C5
<android.media.MediaRouter: void <init>(android.content.Context)> C5
<android.permission.PermissionManager: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> C5
<android.permission.PermissionManager: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> C5
<android.permission.PermissionManager: void setRuntimePermissionsVersion(int)> C5
<android.permission.PermissionManager: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> C5
<android.permission.PermissionManager: void grantDefaultPermissionsToLuiApp(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> C5
<android.permission.PermissionManager: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> C5
<android.permission.PermissionManager: void startOneTimePermissionSession(java.lang.String,long,int,int)> C5
<android.permission.PermissionManager: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> C5
<android.permission.PermissionManager: void stopOneTimePermissionSession(java.lang.String)> C5
<android.hardware.SerialManager: android.hardware.SerialPort openSerialPort(java.lang.String,int)> C5
<android.media.session.MediaSessionManager: void dispatchMediaKeyEvent(android.view.KeyEvent,boolean)> C5
<android.media.session.MediaSessionManager: void dispatchMediaKeyEvent(android.view.KeyEvent)> C5
<android.media.session.MediaSessionManager: void dispatchMediaKeyEventAsSystemService(android.view.KeyEvent)> C5
<android.app.UriGrantsManager: void clearGrantedUriPermissions(java.lang.String)> C5
<android.app.AppOpsManager: int checkAudioOp(int,int,int,java.lang.String)> C5
<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: void finishOp(int,int,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: void clearHistory()> C5
<android.app.AppOpsManager: int noteProxyOp(int,java.lang.String)> C5
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)> C5
<android.app.AppOpsManager: int noteOp(int,int,java.lang.String,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean)> C5
<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(int,int,java.lang.String)> C5
<android.app.AppOpsManager: void setRestriction(int,int,int,java.lang.String[])> C5
<android.app.AppOpsManager: void setUserRestrictionForUser(int,boolean,android.os.IBinder,java.lang.String[],int)> C5
<android.app.AppOpsManager: void offsetHistory(long)> C5
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int)> C5
<android.app.AppOpsManager: int checkOpNoThrow(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: void startWatchingStarted(int[],android.app.AppOpsManager$OnOpStartedListener)> C5
<android.app.AppOpsManager: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()> C5
<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: int startOp(int)> C5
<android.app.AppOpsManager: int unsafeCheckOpRaw(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String)> C5
<android.app.AppOpsManager: void setOnOpNotedCallback(java.util.concurrent.Executor,android.app.AppOpsManager$OnOpNotedCallback)> C5
<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)> C5
<android.app.AppOpsManager: int checkOp(int,int,java.lang.String)> C5
<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: int checkOp(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)> C5
<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)> C5
<android.app.AppOpsManager: void setNotedAppOpsCollector(android.app.AppOpsManager$AppOpsCollector)> C5
<android.app.AppOpsManager: void checkPackage(int,java.lang.String)> C5
<android.app.AppOpsManager: int startOp(int,int,java.lang.String)> C5
<android.app.AppOpsManager: int unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: void finishOp(int)> C5
<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: void setUserRestriction(int,boolean,android.os.IBinder)> C5
<android.app.AppOpsManager: void resetHistoryParameters()> C5
<android.app.AppOpsManager: void setUserRestriction(int,boolean,android.os.IBinder,java.lang.String[])> C5
<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: int noteOp(int)> C5
<android.app.AppOpsManager: void setMode(java.lang.String,int,java.lang.String,int)> C5
<android.app.AppOpsManager: void setHistoryParameters(int,long,int)> C5
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int noteProxyOpNoThrow(int,java.lang.String,int,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: void startWatchingActive(int[],android.app.AppOpsManager$OnOpActiveChangedListener)> C5
<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)> C5
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int unsafeCheckOp(java.lang.String,int,java.lang.String)> C5
<android.app.AppOpsManager: int checkAudioOpNoThrow(int,int,int,java.lang.String)> C5
<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean)> C5
<android.app.AppOpsManager: void startWatchingActive(java.lang.String[],java.util.concurrent.Executor,android.app.AppOpsManager$OnOpActiveChangedListener)> C5
<android.app.AppOpsManager: void finishOp(int,int,java.lang.String)> C5
<android.app.AppOpsManager: void startWatchingNoted(int[],android.app.AppOpsManager$OnOpNotedListener)> C5
<android.app.AppOpsManager: int noteProxyOp(int,java.lang.String,int,java.lang.String,java.lang.String)> C5
<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)> C5
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean,android.graphics.Rect)> C5
<android.app.SearchManager: void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)> C5
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)> C5
<android.app.usage.UsageStatsManager: void registerAppUsageObserver(int,java.lang.String[],long,java.util.concurrent.TimeUnit,android.app.PendingIntent)> C5
<android.app.usage.UsageStatsManager: void registerAppUsageLimitObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent)> C5
<android.app.usage.UsageStatsManager: void unregisterUsageSessionObserver(int)> C5
<android.app.usage.UsageStatsManager: void unregisterAppUsageLimitObserver(int)> C5
<android.app.usage.UsageStatsManager: void unregisterAppUsageObserver(int)> C5
<android.app.usage.UsageStatsManager: void registerUsageSessionObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent,android.app.PendingIntent)> C5
<android.app.usage.UsageStatsManager: void setAppStandbyBuckets(java.util.Map)> C5
<android.app.usage.UsageStatsManager: void setAppStandbyBucket(java.lang.String,int)> C5
<android.app.usage.UsageStatsManager: void onCarrierPrivilegedAppsChanged()> C5
<android.app.AlarmManager: void setTimeZone(java.lang.String)> C5
<android.app.AlarmManager: void setTime(long)> C5
<android.app.StatusBarManager: void expandSettingsPanel(java.lang.String)> C5
<android.app.StatusBarManager: void expandNotificationsPanel()> C5
<android.app.StatusBarManager: void setDisabledForSetup(boolean)> C5
<android.app.StatusBarManager: void expandSettingsPanel()> C5
<android.app.StatusBarManager: void removeIcon(java.lang.String)> C5
<android.app.StatusBarManager: void setDisabledForSimNetworkLock(boolean)> C5
<android.app.StatusBarManager: void disable(int)> C5
<android.app.StatusBarManager: void collapsePanels()> C5
<android.app.StatusBarManager: void setIcon(java.lang.String,int,int,java.lang.String)> C5
<android.app.StatusBarManager: void disable2(int)> C5
<android.app.StatusBarManager: void setIconVisibility(java.lang.String,boolean)> C5
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> C5
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,android.location.LocationListener)> C5
<android.location.LocationManager: void setExtraLocationControllerPackageEnabled(boolean)> C5
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> C5
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> C5
<android.location.LocationManager: void setLocationControllerExtraPackageEnabled(boolean)> C5
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> C5
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> C5
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> C5
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> C5
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> C5
<android.location.LocationManager: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)> C5
<android.location.LocationManager: boolean unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)> C5
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> C5
<android.location.LocationManager: void setExtraLocationControllerPackage(java.lang.String)> C5
<android.location.LocationManager: void removeTestProvider(java.lang.String)> C5
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> C5
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> C5
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)> C5
<android.location.LocationManager: boolean registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)> C5
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)> C5
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)> C5
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> C5
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,java.util.concurrent.Executor,android.location.LocationListener)> C5
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> C5
<android.location.LocationManager: void setLocationControllerExtraPackage(java.lang.String)> C5
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> C5
<android.location.LocationManager: void flushGnssBatch()> C5
<android.os.RecoverySystem: void prepareForUnattendedUpdate(android.content.Context,java.lang.String,android.content.IntentSender)> C5
<android.os.RecoverySystem: void rebootWipeCache(android.content.Context,java.lang.String)> C5
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean,java.lang.String,boolean,boolean)> C5
<android.os.RecoverySystem: void rebootWipeCache(android.content.Context)> C5
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File,boolean)> C5
<android.os.RecoverySystem: void processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)> C5
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,java.lang.String)> C5
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File)> C5
<android.os.RecoverySystem: void processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)> C5
<android.os.RecoverySystem: void clearPrepareForUnattendedUpdate(android.content.Context)> C5
<android.os.RecoverySystem: void cancelScheduledUpdate(android.content.Context)> C5
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean,java.lang.String,boolean)> C5
<android.os.RecoverySystem: void scheduleUpdateOnBoot(android.content.Context,java.io.File)> C5
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean)> C5
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context)> C5
<android.os.RecoverySystem: void rebootWipeAb(android.content.Context,java.io.File,java.lang.String)> C5
<android.os.RecoverySystem: void rebootPromptAndWipeUserData(android.content.Context,java.lang.String)> C5
<android.hardware.fingerprint.FingerprintManager: void rename(int,int,java.lang.String)> C5
<android.hardware.biometrics.BiometricManager: void resetLockout(byte[])> C5
<android.hardware.biometrics.BiometricManager: void setActiveUser(int)> C5
<android.hardware.biometrics.BiometricManager: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)> C5
<android.content.rollback.RollbackManager: void blockRollbackManager(long)> C5
<android.content.rollback.RollbackManager: void reloadPersistedData()> C5
<android.app.admin.DevicePolicyManager: void notifyPendingSystemUpdate(long,boolean)> C5
<android.app.admin.DevicePolicyManager: void notifyPendingSystemUpdate(long)> C5
<android.hardware.SensorPrivacyManager: void setSensorPrivacy(boolean)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats querySummary(android.net.NetworkTemplate,long,long)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTag(int,java.lang.String,long,long,int,int)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTagState(android.net.NetworkTemplate,long,long,int,int,int)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTagState(int,java.lang.String,long,long,int,int,int)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetails(int,java.lang.String,long,long)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(int,java.lang.String,long,long,int)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForUser(int,java.lang.String,long,long)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(android.net.NetworkTemplate,long,long,int)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForDevice(int,java.lang.String,long,long)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForDevice(android.net.NetworkTemplate,long,long)> C5
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats querySummary(int,java.lang.String,long,long)> C5
<android.hardware.lights.LightsManager: android.hardware.lights.LightsManager$LightsSession openSession()> C5
<android.os.BatteryManager: boolean setChargingStateUpdateDelayMillis(int)> C5
<android.view.inputmethod.InputMethodManager: void reportPerceptible(android.os.IBinder,boolean)> C5
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)> C5
<android.view.inputmethod.InputMethodManager: void showInputMethodPickerFromSystem(boolean,int)> C5
<android.view.inputmethod.InputMethodManager: void lambda$startInputInner$1$InputMethodManager(int)> C5
<android.view.inputmethod.InputMethodManager: boolean requestImeShow(android.os.IBinder)> C5
<android.view.inputmethod.InputMethodManager: void showSoftInputUnchecked(int,android.os.ResultReceiver)> C5
<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)> C5
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)> C5
<android.net.NetworkWatchlistManager: void reloadWatchlist()> C5
<android.net.ConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)> C5
<android.net.ConnectivityManager: void startCaptivePortalApp(android.net.Network,android.os.Bundle)> C5
<android.net.ConnectivityManager: android.net.ConnectivityManager$PacketKeepalive startNattKeepalive(android.net.Network,int,android.net.ConnectivityManager$PacketKeepaliveCallback,java.net.InetAddress,int,java.net.InetAddress)> C5
<android.net.ConnectivityManager: void enforceChangePermission(android.content.Context)> C5
<android.app.UiModeManager: void setNightMode(int)> C5
<android.app.UiModeManager: void setCustomNightModeStart(java.time.LocalTime)> C5
<android.app.UiModeManager: void enableCarMode(int)> C5
<android.app.UiModeManager: void setCustomNightModeEnd(java.time.LocalTime)> C5
<android.app.UiModeManager: void enableCarMode(int,int)> C5
<android.app.UiModeManager: void disableCarMode(int)> C5
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeMyUidSnapshot()> C5
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeUidSnapshot(int)> C5
<android.os.health.SystemHealthManager: android.os.health.HealthStats[] takeUidSnapshots(int[])> C5
<android.os.BugreportManager: void requestBugreport(android.os.BugreportParams,java.lang.CharSequence,java.lang.CharSequence)> C5
<android.hardware.usb.UsbManager: void setCurrentFunctions(long)> C5
<android.hardware.usb.UsbManager: void resetUsbGadget()> C5
<android.hardware.usb.UsbManager: void setScreenUnlockedFunctions(long)> C5
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice)> C5
<android.hardware.usb.UsbManager: void setUsbDeviceConnectionHandler(android.content.ComponentName)> C5
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)> C5
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice,java.lang.String)> C5
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice,int)> C5
<android.hardware.input.InputManager: void registerOnTabletModeChangedListener(android.hardware.input.InputManager$OnTabletModeChangedListener,android.os.Handler)> C5
<android.hardware.input.InputManager: void tryPointerSpeed(int)> C5
<android.hardware.input.InputManager: android.view.InputMonitor monitorGestureInput(java.lang.String,int)> C5
<android.hardware.input.InputManager: void disableInputDevice(int)> C5
<android.hardware.input.InputManager: void setTouchCalibration(java.lang.String,int,android.hardware.input.TouchCalibration)> C5
<android.hardware.input.InputManager: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)> C5
<android.hardware.input.InputManager: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)> C5
<android.hardware.input.InputManager: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)> C5
<android.hardware.input.InputManager: void enableInputDevice(int)> C5
<android.hardware.input.InputManager: void addPortAssociation(java.lang.String,int)> C5
<android.hardware.input.InputManager: void removePortAssociation(java.lang.String)> C5
<android.companion.CompanionDeviceManager: void associate(android.companion.AssociationRequest,android.companion.CompanionDeviceManager$Callback,android.os.Handler)> C5
<android.media.midi.MidiManager: android.media.midi.MidiDeviceServer createDeviceServer(android.media.midi.MidiReceiver[],int,java.lang.String[],java.lang.String[],android.os.Bundle,int,android.media.midi.MidiDeviceServer$Callback)> C5
<android.app.trust.TrustManager: void reportEnabledTrustAgentsChanged(int)> C5
<android.app.trust.TrustManager: void clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType)> C5
<android.app.trust.TrustManager: void setDeviceLockedForUser(int,boolean)> C5
<android.app.trust.TrustManager: void reportUnlockLockout(int,int)> C5
<android.app.trust.TrustManager: void unregisterTrustListener(android.app.trust.TrustManager$TrustListener)> C5
<android.app.trust.TrustManager: void unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)> C5
<android.app.trust.TrustManager: void reportKeyguardShowingChanged()> C5
<android.app.trust.TrustManager: void reportUnlockAttempt(boolean,int)> C5
<android.app.trust.TrustManager: void registerTrustListener(android.app.trust.TrustManager$TrustListener)> C5
<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> C5
<android.view.ViewManager: void removeView(android.view.View)> C5
<android.view.WindowManager: void removeViewImmediate(android.view.View)> C5
<android.os.IncidentManager: void cancelAuthorization(android.os.IncidentManager$AuthListener)> C5
<android.os.IncidentManager: void approveReport(android.net.Uri)> C5
<android.os.IncidentManager: void requestAuthorization(int,java.lang.String,int,android.os.IncidentManager$AuthListener)> C5
<android.os.IncidentManager: void requestAuthorization(int,java.lang.String,int,java.util.concurrent.Executor,android.os.IncidentManager$AuthListener)> C5
<android.os.IncidentManager: void denyReport(android.net.Uri)> C5
<android.view.accessibility.AccessibilityManager: void removeAccessibilityInteractionConnection(android.view.IWindow)> C5
<android.view.accessibility.AccessibilityManager: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)> C5
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> C5
<android.view.accessibility.AccessibilityManager: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)> C5
<android.view.accessibility.AccessibilityManager: void disassociateEmbeddedHierarchy(android.os.IBinder)> C5
<android.view.accessibility.AccessibilityManager: void registerSystemAction(android.app.RemoteAction,int)> C5
<android.view.accessibility.AccessibilityManager: void notifyAccessibilityButtonClicked(int,java.lang.String)> C5
<android.view.accessibility.AccessibilityManager: void performAccessibilityShortcut(java.lang.String)> C5
<android.view.accessibility.AccessibilityManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,java.lang.String,android.view.accessibility.IAccessibilityInteractionConnection)> C5
<android.view.accessibility.AccessibilityManager: void notifyAccessibilityButtonVisibilityChanged(boolean)> C5
<android.view.accessibility.AccessibilityManager: void performAccessibilityShortcut()> C5
<android.view.accessibility.AccessibilityManager: boolean sendFingerprintGesture(int)> C5
<android.view.accessibility.AccessibilityManager: void associateEmbeddedHierarchy(android.os.IBinder,android.os.IBinder)> C5
<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context,android.view.accessibility.IAccessibilityManager,int)> C5
<android.view.accessibility.AccessibilityManager: void notifyAccessibilityButtonClicked(int)> C5
<android.view.accessibility.AccessibilityManager: void unregisterSystemAction(int)> C5
<android.view.accessibility.AccessibilityManager: void <init>(android.os.Handler,android.view.accessibility.IAccessibilityManager,int)> C5
<android.view.accessibility.AccessibilityManager: void interrupt()> C5
<android.app.NotificationManager: void setNotificationListenerAccessGrantedForUser(android.content.ComponentName,int,boolean)> C5
<android.app.NotificationManager: void setNotificationListenerAccessGranted(android.content.ComponentName,boolean)> C5
<android.app.NotificationManager: void setZenMode(int,android.net.Uri,java.lang.String)> C5
<android.app.NotificationManager: void setNotificationPolicyAccessGranted(java.lang.String,boolean)> C5
<android.media.projection.MediaProjectionManager: void stopActiveProjection()> C5
<android.media.projection.MediaProjectionManager: void addCallback(android.media.projection.MediaProjectionManager$Callback,android.os.Handler)> C5
<android.media.projection.MediaProjectionManager: void removeCallback(android.media.projection.MediaProjectionManager$Callback)> C5
<android.hardware.display.ColorDisplayManager: boolean setDisplayWhiteBalanceEnabled(boolean)> C5
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayActivated(boolean)> C5
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayCustomStartTime(java.time.LocalTime)> C5
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayCustomEndTime(java.time.LocalTime)> C5
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayAutoMode(int)> C5
<android.hardware.display.ColorDisplayManager: boolean setSaturationLevel(int)> C5
<android.hardware.display.ColorDisplayManager: void setColorMode(int)> C5
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayColorTemperature(int)> C5
<android.media.AudioManager: void setRingerModeInternal(int)> C5
<android.media.AudioManager: void setMicrophoneMuteFromSwitch(boolean)> C5
<android.media.AudioManager: void startBluetoothScoVirtualCall()> C5
<android.media.AudioManager: void addOnPreferredDeviceForStrategyChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)> C5
<android.media.AudioManager: void dispatchMediaKeyEvent(android.view.KeyEvent)> C5
<android.media.AudioManager: void startBluetoothSco()> C5
<android.media.AudioManager: void stopBluetoothSco()> C5
<android.media.AudioManager: void registerAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback,android.os.Handler)> C5
<android.media.AudioManager: void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback,android.os.Handler)> C5
<android.media.AudioManager: void forceVolumeControlStream(int)> C5
<android.media.AudioManager: void removeOnPreferredDeviceForStrategyChangedListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)> C5
<android.media.AudioManager: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)> C5
<android.media.AudioManager: void setRttEnabled(boolean)> C5
<android.media.AudioManager: void setAudioServerStateCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioServerStateCallback)> C5
<android.media.AudioManager: void disableSafeMediaVolume()> C5
<android.media.AudioManager: boolean setPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy,android.media.AudioDeviceAttributes)> C5
<android.media.AudioManager: void setSupportedSystemUsages(int[])> C5
<android.media.AudioManager: void setVolumeController(android.media.IVolumeController)> C5
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes)> C5
<android.media.AudioManager: void clearAudioServerStateCallback()> C5
<android.media.AudioManager: boolean removePreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)> C5
<android.media.AudioManager: void abandonAudioFocusForCall()> C5
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)> C5
<android.media.AudioManager: void setVolumePolicy(android.media.VolumePolicy)> C5
<android.media.AudioManager: void setBluetoothScoOn(boolean)> C5
<android.media.AudioManager: void unregisterAudioPolicy(android.media.audiopolicy.AudioPolicy)> C5
<android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)> C5
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> C5
<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)> C5
<android.os.Vibrator: void cancel()> C5
<android.os.Vibrator: void vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.media.AudioAttributes)> C5
<android.os.storage.StorageManager: boolean checkPermissionAndCheckOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,int)> C5
<android.os.storage.StorageManager: void forgetVolume(java.lang.String)> C5
<android.os.storage.StorageManager: boolean checkPermissionReadAudio(boolean,int,int,java.lang.String,java.lang.String)> C5
<android.os.storage.StorageManager: void prepareUserStorage(java.lang.String,int,int,int)> C5
<android.os.storage.StorageManager: boolean checkPermissionWriteAudio(boolean,int,int,java.lang.String,java.lang.String)> C5
<android.os.storage.StorageManager: void lockUserKey(int)> C5
<android.os.storage.StorageManager: void setVolumeNickname(java.lang.String,java.lang.String)> C5
<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long)> C5
<android.os.storage.StorageManager: void setVolumeInited(java.lang.String,boolean)> C5
<android.os.storage.StorageManager: void unlockUserKey(int,int,byte[],byte[])> C5
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long)> C5
<android.os.storage.StorageManager: void setVolumeSnoozed(java.lang.String,boolean)> C5
<android.os.storage.StorageManager: boolean checkPermissionWriteVideo(boolean,int,int,java.lang.String,java.lang.String)> C5
<android.os.storage.StorageManager: boolean checkPermissionReadVideo(boolean,int,int,java.lang.String,java.lang.String)> C5
<android.os.storage.StorageManager: boolean checkPermissionAndAppOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)> C5
<android.os.storage.StorageManager: boolean checkPermissionReadImages(boolean,int,int,java.lang.String,java.lang.String)> C5
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long,int)> C5
<android.os.storage.StorageManager: void destroyUserStorage(java.lang.String,int,int)> C5
<android.os.storage.StorageManager: boolean checkPermissionWriteImages(boolean,int,int,java.lang.String,java.lang.String)> C5
<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long,int)> C5
<android.app.ActivityTaskManager: void clearLaunchParamsForPackages(java.util.List)> C5
<android.app.ActivityTaskManager: void startSystemLockTaskMode(int)> C5
<android.app.ActivityTaskManager: void requestPictureInPictureMode(android.os.IBinder)> C5
<android.app.ActivityTaskManager: void setDisplayToSingleTaskInstance(int)> C5
<android.app.ActivityTaskManager: void stopSystemLockTaskMode()> C5
<android.app.ActivityTaskManager: void resizeTask(int,android.graphics.Rect)> C5
<android.os.BatteryStatsManager: void reportWifiOff()> C5
<android.os.BatteryStatsManager: void reportWifiOn()> C5
<android.os.BatteryStatsManager: void reportWifiSupplicantStateChanged(int,boolean)> C5
<android.os.BatteryStatsManager: void reportWifiScanStoppedFromSource(android.os.WorkSource)> C5
<android.os.BatteryStatsManager: void reportWifiBatchedScanStartedFromSource(android.os.WorkSource,int)> C5
<android.os.BatteryStatsManager: void reportWifiState(int,java.lang.String)> C5
<android.os.BatteryStatsManager: void reportWifiBatchedScanStoppedFromSource(android.os.WorkSource)> C5
<android.os.BatteryStatsManager: void reportFullWifiLockReleasedFromSource(android.os.WorkSource)> C5
<android.os.BatteryStatsManager: void reportWifiMulticastEnabled(android.os.WorkSource)> C5
<android.os.BatteryStatsManager: void reportFullWifiLockAcquiredFromSource(android.os.WorkSource)> C5
<android.os.BatteryStatsManager: void reportWifiRssiChanged(int)> C5
<android.os.BatteryStatsManager: void reportWifiMulticastDisabled(android.os.WorkSource)> C5
<android.os.BatteryStatsManager: void reportWifiScanStartedFromSource(android.os.WorkSource)> C5
<android.media.soundtrigger.SoundTriggerManager: void deleteModel(java.util.UUID)> C5
<android.media.soundtrigger.SoundTriggerManager: void updateModel(android.media.soundtrigger.SoundTriggerManager$Model)> C5
<android.media.soundtrigger.SoundTriggerManager: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(java.util.UUID,int)> C5
<android.media.soundtrigger.SoundTriggerManager: int loadSoundModel(android.hardware.soundtrigger.SoundTrigger$SoundModel)> C5
<android.media.soundtrigger.SoundTriggerManager: int setParameter(java.util.UUID,int,int)> C5
<android.os.image.DynamicSystemManager: boolean abort()> C6
<android.os.image.DynamicSystemManager: boolean finishInstallation()> C6
<android.os.image.DynamicSystemManager: boolean startInstallation(java.lang.String)> C6
<android.os.image.DynamicSystemManager: android.os.image.DynamicSystemManager$Session createPartition(java.lang.String,long,boolean)> C6
<android.os.image.DynamicSystemManager: boolean setEnable(boolean,boolean)> C6
<android.os.UserManager: android.content.pm.UserInfo createProfileForUser(java.lang.String,java.lang.String,int,int,java.lang.String[])> C6
<android.os.UserManager: boolean requestQuietModeEnabled(boolean,android.os.UserHandle)> C6
<android.os.UserManager: void setUserIcon(int,android.graphics.Bitmap)> C6
<android.os.UserManager: boolean removeUser(android.os.UserHandle)> C6
<android.os.UserManager: android.os.UserHandle createProfile(java.lang.String,java.lang.String,java.util.Set)> C6
<android.os.UserManager: android.content.pm.UserInfo createGuest(android.content.Context,java.lang.String)> C6
<android.os.UserManager: android.content.pm.UserInfo createRestrictedProfile(java.lang.String)> C6
<android.os.UserManager: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowed(java.lang.String,java.lang.String,int,int,java.lang.String[])> C6
<android.os.UserManager: void setUserRestriction(java.lang.String,boolean)> C6
<android.os.UserManager: android.content.pm.UserInfo createProfileForUser(java.lang.String,int,int)> C6
<android.os.UserManager: boolean markGuestForDeletion(int)> C6
<android.os.UserManager: android.content.pm.UserInfo preCreateUser(java.lang.String)> C6
<android.os.UserManager: boolean requestQuietModeEnabled(boolean,android.os.UserHandle,android.content.IntentSender,int)> C6
<android.os.UserManager: boolean removeUser(int)> C6
<android.os.UserManager: boolean requestQuietModeEnabled(boolean,android.os.UserHandle,int)> C6
<android.os.UserManager: boolean requestQuietModeEnabled(boolean,android.os.UserHandle,android.content.IntentSender)> C6
<android.os.UserManager: android.content.pm.UserInfo createUser(java.lang.String,java.lang.String,int)> C6
<android.os.UserManager: void setUserIcon(android.graphics.Bitmap)> C6
<android.os.UserManager: android.content.pm.UserInfo createUser(java.lang.String,int)> C6
<android.os.UserManager: void setApplicationRestrictions(java.lang.String,android.os.Bundle,android.os.UserHandle)> C6
<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)> C6
<android.os.UserManager: android.content.pm.UserInfo createProfileForUser(java.lang.String,java.lang.String,int,int)> C6
<android.app.WallpaperManager: boolean setWallpaperComponent(android.content.ComponentName)> C6
<android.app.WallpaperManager: void addOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener,android.os.Handler,int)> C6
<android.app.WallpaperManager: void clearWallpaper(int,int)> C6
<android.app.WallpaperManager: void clearWallpaper()> C6
<android.app.WallpaperManager: void setDisplayPadding(android.graphics.Rect)> C6
<android.app.WallpaperManager: void removeOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener,int)> C6
<android.app.WallpaperManager: void setStream(java.io.InputStream)> C6
<android.app.WallpaperManager: void setResource(int)> C6
<android.app.WallpaperManager: void clear(int)> C6
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)> C6
<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean)> C6
<android.app.WallpaperManager: void addOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener,android.os.Handler)> C6
<android.app.WallpaperManager: void clear()> C6
<android.app.WallpaperManager: int setResource(int,int)> C6
<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)> C6
<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int,int)> C6
<android.app.WallpaperManager: void removeOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener)> C6
<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)> C6
<android.app.WallpaperManager: boolean setWallpaperComponent(android.content.ComponentName,int)> C6
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)> C6
<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean,int)> C6
<android.app.role.RoleManager: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> C6
<android.app.role.RoleManager: void addOnRoleHoldersChangedListenerAsUser(java.util.concurrent.Executor,android.app.role.OnRoleHoldersChangedListener,android.os.UserHandle)> C6
<android.app.role.RoleManager: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.OnRoleHoldersChangedListener,android.os.UserHandle)> C6
<android.app.role.RoleManager: void clearRoleHoldersAsUser(java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> C6
<android.app.role.RoleManager: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> C6
<android.os.SystemUpdateManager: android.os.Bundle retrieveSystemUpdateInfo()> C6
<android.os.SystemUpdateManager: void updateSystemUpdateInfo(android.os.PersistableBundle)> C6
<android.app.ActivityManager: int checkUidPermission(java.lang.String,int)> C6
<android.app.ActivityManager: boolean updateMccMncConfiguration(java.lang.String,java.lang.String)> C6
<android.app.ActivityManager: boolean switchUser(int)> C6
<android.app.ActivityManager: void appNotResponding(java.lang.String)> C6
<android.app.ActivityManager: boolean clearApplicationUserData()> C6
<android.app.ActivityManager: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)> C6
<android.app.ActivityManager: void resumeAppSwitches()> C6
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> C6
<android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)> C6
<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> C6
<android.app.ActivityManager: int checkComponentPermission(java.lang.String,int,int,boolean)> C6
<android.app.ActivityManager: void setPackageAskScreenCompat(java.lang.String,boolean)> C6
<android.app.ActivityManager: void logoutCurrentUser()> C6
<android.app.ActivityManager: void forceStopPackage(java.lang.String)> C6
<android.app.ActivityManager: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)> C6
<android.app.ActivityManager: boolean switchUser(android.os.UserHandle)> C6
<android.app.ActivityManager: void forceStopPackageAsUser(java.lang.String,int)> C6
<android.app.ActivityManager: void moveTaskToFront(int,int)> C6
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)> C6
<android.app.ActivityManager: void setFrontActivityScreenCompatMode(int)> C6
<android.app.ActivityManager: void restartPackage(java.lang.String)> C6
<android.net.NetworkPolicyManager: void factoryReset(java.lang.String)> C6
<android.net.NetworkPolicyManager: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)> C6
<android.net.NetworkPolicyManager: void setSubscriptionOverride(int,int,int,long,java.lang.String)> C6
<android.net.NetworkPolicyManager: void addUidPolicy(int,int)> C6
<android.net.NetworkPolicyManager: void removeUidPolicy(int,int)> C6
<android.app.DreamManager: void setActiveDream(android.content.ComponentName)> C6
<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)> C6
<android.hardware.display.DisplayManager: void setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)> C6
<android.hardware.display.DisplayManager: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)> C6
<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)> C6
<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(android.media.projection.MediaProjection,android.hardware.display.VirtualDisplayConfig,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)> C6
<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(android.media.projection.MediaProjection,java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler,java.lang.String)> C6
<android.app.KeyguardManager: void setPrivateNotificationsAllowed(boolean)> C6
<android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)> C6
<android.accounts.AccountManager: boolean removeAccountExplicitly(android.accounts.Account)> C6
<android.accounts.AccountManager: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)> C6
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> C6
<android.accounts.AccountManager: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> C6
<android.accounts.AccountManager: void addSharedAccountsFromParentUser(android.os.UserHandle,android.os.UserHandle)> C6
<android.accounts.AccountManager: boolean someUserHasAccount(android.accounts.Account)> C6
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean,java.lang.String[])> C6
<android.accounts.AccountManager: boolean notifyAccountAuthenticated(android.accounts.Account)> C6
<android.net.NetworkScoreManager: boolean setActiveScorer(java.lang.String)> C6
<android.permission.PermissionManager: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)> C6
<android.content.om.OverlayManager: void setEnabledExclusiveInCategory(java.lang.String,android.os.UserHandle)> C6
<android.content.om.OverlayManager: void invalidateCachesForOverlay(java.lang.String,android.os.UserHandle)> C6
<android.content.om.OverlayManager: void setEnabled(java.lang.String,boolean,android.os.UserHandle)> C6
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)> C6
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)> C6
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(int,android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)> C6
<android.media.session.MediaSessionManager: android.media.session.ISession createSession(android.media.session.MediaSession$CallbackStub,java.lang.String,android.os.Bundle)> C6
<android.app.timezonedetector.TimeZoneDetector: void suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)> C6
<android.app.timezonedetector.TimeZoneDetector: void suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)> C6
<android.app.AppOpsManager: void setUidMode(java.lang.String,int,int)> C6
<android.app.AppOpsManager: void reloadNonHistoricalState()> C6
<android.app.AppOpsManager: void rebootHistory(long)> C6
<android.app.AppOpsManager: void setUidMode(int,int,int)> C6
<android.app.AppOpsManager: void resetAllModes()> C6
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEventsForSelf(long,long)> C6
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEvents(long,long)> C6
<android.app.usage.UsageStatsManager: java.util.List queryEventStats(int,long,long)> C6
<android.app.usage.UsageStatsManager: void whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)> C6
<android.app.usage.UsageStatsManager: void setAppInactive(java.lang.String,boolean)> C6
<android.app.usage.UsageStatsManager: java.util.List queryConfigurations(int,long,long)> C6
<android.app.usage.UsageStatsManager: void forceUsageSourceSettingRead()> C6
<android.app.usage.UsageStatsManager: java.util.Map queryAndAggregateUsageStats(long,long)> C6
<android.app.usage.UsageStatsManager: java.util.List queryUsageStats(int,long,long)> C6
<android.app.AlarmManager: void setExactAndAllowWhileIdle(int,long,android.app.PendingIntent)> C6
<android.app.AlarmManager: void set(int,long,long,long,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)> C6
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)> C6
<android.app.AlarmManager: void setAlarmClock(android.app.AlarmManager$AlarmClockInfo,android.app.PendingIntent)> C6
<android.app.AlarmManager: void setExact(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)> C6
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)> C6
<android.app.AlarmManager: void set(int,long,long,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)> C6
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)> C6
<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)> C6
<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)> C6
<android.app.AlarmManager: void setAndAllowWhileIdle(int,long,android.app.PendingIntent)> C6
<android.app.AlarmManager: void setIdleUntil(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)> C6
<android.app.AlarmManager: void set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)> C6
<android.app.AlarmManager: void setWindow(int,long,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)> C6
<android.app.AlarmManager: void setWindow(int,long,long,android.app.PendingIntent)> C6
<android.appwidget.AppWidgetManager: void updateAppWidgetOptions(int,android.os.Bundle)> C6
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int[],int)> C6
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.os.UserHandle,android.content.ComponentName,android.os.Bundle)> C6
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)> C6
<android.appwidget.AppWidgetManager: boolean requestPinAppWidget(android.content.ComponentName,android.app.PendingIntent)> C6
<android.appwidget.AppWidgetManager: void setBindAppWidgetPermission(java.lang.String,boolean)> C6
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.content.ComponentName,android.os.Bundle)> C6
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int,int)> C6
<android.appwidget.AppWidgetManager: void setBindAppWidgetPermission(java.lang.String,int,boolean)> C6
<android.appwidget.AppWidgetManager: boolean bindRemoteViewsService(android.content.Context,int,android.content.Intent,android.app.IServiceConnection,int)> C6
<android.appwidget.AppWidgetManager: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)> C6
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)> C6
<android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle)> C6
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.content.ComponentName)> C6
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)> C6
<android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName)> C6
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int,android.widget.RemoteViews)> C6
<android.appwidget.AppWidgetManager: boolean requestPinAppWidget(android.content.ComponentName,android.os.Bundle,android.app.PendingIntent)> C6
<android.appwidget.AppWidgetManager: void noteAppWidgetTapped(int)> C6
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int[],android.widget.RemoteViews)> C6
<android.view.accessibility.CaptioningManager: void addCaptioningChangeListener(android.view.accessibility.CaptioningManager$CaptioningChangeListener)> C6
<android.location.LocationManager: void setLocationEnabledForUser(boolean,android.os.UserHandle)> C6
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> C6
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> C6
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> C6
<android.location.LocationManager: void addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)> C6
<android.location.LocationManager: boolean injectLocation(android.location.Location)> C6
<android.os.RecoverySystem: void rebootAndApply(android.content.Context,java.lang.String,java.lang.String)> C6
<android.telephony.TelephonyRegistryManager: void notifyOutgoingEmergencySms(int,int,android.telephony.emergency.EmergencyNumber)> C6
<android.telephony.TelephonyRegistryManager: void notifyVoiceActivationStateChanged(int,int,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyCarrierNetworkChange(boolean)> C6
<android.telephony.TelephonyRegistryManager: void notifyCallForwardingChanged(int,boolean)> C6
<android.telephony.TelephonyRegistryManager: void notifyCellInfoChanged(int,java.util.List)> C6
<android.telephony.TelephonyRegistryManager: void notifyMessageWaitingChanged(int,int,boolean)> C6
<android.telephony.TelephonyRegistryManager: void notifyPreciseCallState(int,int,int,int,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)> C6
<android.telephony.TelephonyRegistryManager: void notifyDisconnectCause(int,int,int,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyRadioPowerStateChanged(int,int,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyDataActivationStateChanged(int,int,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyImsDisconnectCause(int,android.telephony.ims.ImsReasonInfo)> C6
<android.telephony.TelephonyRegistryManager: void notifyCallStateChangedForAllSubscriptions(int,java.lang.String)> C6
<android.telephony.TelephonyRegistryManager: void notifyCallStateChanged(int,int,int,java.lang.String)> C6
<android.telephony.TelephonyRegistryManager: void notifySignalStrengthChanged(int,int,android.telephony.SignalStrength)> C6
<android.telephony.TelephonyRegistryManager: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyDataActivityChanged(int,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyServiceStateChanged(int,int,android.telephony.ServiceState)> C6
<android.telephony.TelephonyRegistryManager: void removeOnOpportunisticSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnOpportunisticSubscriptionsChangedListener)> C6
<android.telephony.TelephonyRegistryManager: void notifyCellLocation(int,android.telephony.CellIdentity)> C6
<android.telephony.TelephonyRegistryManager: void notifyDisplayInfoChanged(int,int,android.telephony.TelephonyDisplayInfo)> C6
<android.telephony.TelephonyRegistryManager: void notifyOpportunisticSubscriptionInfoChanged()> C6
<android.telephony.TelephonyRegistryManager: void notifySrvccStateChanged(int,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyOutgoingEmergencyCall(int,int,android.telephony.emergency.EmergencyNumber)> C6
<android.telephony.TelephonyRegistryManager: void notifyUserMobileDataStateChanged(int,int,boolean)> C6
<android.telephony.TelephonyRegistryManager: void removeOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)> C6
<android.telephony.TelephonyRegistryManager: void notifyEmergencyNumberList(int,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyActiveDataSubIdChanged(int)> C6
<android.telephony.TelephonyRegistryManager: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)> C6
<android.telephony.TelephonyRegistryManager: void notifySubscriptionInfoChanged()> C6
<android.telephony.TelephonyRegistryManager: void listenForSubscriber(int,java.lang.String,java.lang.String,android.telephony.PhoneStateListener,int,boolean)> C6
<android.telephony.TelephonyRegistryManager: void notifyCallQualityChanged(int,int,android.telephony.CallQuality,int)> C6
<android.telephony.TelephonyRegistryManager: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)> C6
<android.telephony.TelephonyRegistryManager: void addOnOpportunisticSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnOpportunisticSubscriptionsChangedListener,java.util.concurrent.Executor)> C6
<android.telephony.TelephonyRegistryManager: void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener,java.util.concurrent.Executor)> C6
<android.hardware.fingerprint.FingerprintManager: void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)> C6
<android.hardware.fingerprint.FingerprintManager: void remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)> C6
<android.hardware.fingerprint.FingerprintManager: void enumerate(int,android.hardware.fingerprint.FingerprintManager$EnumerateCallback)> C6
<android.hardware.fingerprint.FingerprintManager: int postEnroll()> C6
<android.hardware.fingerprint.FingerprintManager: void enroll(byte[],android.os.CancellationSignal,int,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)> C6
<android.hardware.fingerprint.FingerprintManager: void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)> C6
<android.hardware.fingerprint.FingerprintManager: long preEnroll()> C6
<android.hardware.fingerprint.FingerprintManager: void setActiveUser(int)> C6
<android.net.ConnectivityDiagnosticsManager: void registerConnectivityDiagnosticsCallback(android.net.NetworkRequest,java.util.concurrent.Executor,android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback)> C6
<android.net.ConnectivityDiagnosticsManager: void unregisterConnectivityDiagnosticsCallback(android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback)> C6
<android.content.rollback.RollbackManager: void expireRollbackForPackage(java.lang.String)> C6
<android.content.rollback.RollbackManager: void commitRollback(int,java.util.List,android.content.IntentSender)> C6
<android.content.pm.ShortcutManager: void onApplicationActive(java.lang.String,int)> C6
<android.content.pm.ShortcutManager: void removeDynamicShortcuts(java.util.List)> C6
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List,java.lang.String)> C6
<android.content.pm.ShortcutManager: boolean addDynamicShortcuts(java.util.List)> C6
<android.content.pm.ShortcutManager: void pushDynamicShortcut(android.content.pm.ShortcutInfo)> C6
<android.content.pm.ShortcutManager: boolean requestPinShortcut(android.content.pm.ShortcutInfo,android.content.IntentSender)> C6
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List)> C6
<android.content.pm.ShortcutManager: void removeLongLivedShortcuts(java.util.List)> C6
<android.content.pm.ShortcutManager: void removeAllDynamicShortcuts()> C6
<android.content.pm.ShortcutManager: boolean updateShortcuts(java.util.List)> C6
<android.content.pm.ShortcutManager: android.content.Intent createShortcutResultIntent(android.content.pm.ShortcutInfo)> C6
<android.content.pm.ShortcutManager: void reportShortcutUsed(java.lang.String)> C6
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List,java.lang.CharSequence)> C6
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List,int)> C6
<android.content.pm.ShortcutManager: void enableShortcuts(java.util.List)> C6
<android.content.pm.ShortcutManager: boolean setDynamicShortcuts(java.util.List)> C6
<android.net.VpnManager: void startProvisionedVpnProfile()> C6
<android.net.VpnManager: android.content.Intent provisionVpnProfile(android.net.PlatformVpnProfile)> C6
<android.app.admin.DevicePolicyManager: void setLogoutEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void reportFailedBiometricAttempt(int)> C6
<android.app.admin.DevicePolicyManager: boolean setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)> C6
<android.app.admin.DevicePolicyManager: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)> C6
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)> C6
<android.app.admin.DevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.net.Proxy,java.util.List)> C6
<android.app.admin.DevicePolicyManager: int enableSystemApp(android.content.ComponentName,android.content.Intent)> C6
<android.app.admin.DevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)> C6
<android.app.admin.DevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setLockTaskFeatures(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])> C6
<android.app.admin.DevicePolicyManager: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)> C6
<android.app.admin.DevicePolicyManager: boolean setStatusBarDisabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)> C6
<android.app.admin.DevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)> C6
<android.app.admin.DevicePolicyManager: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)> C6
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void lockNow(int)> C6
<android.app.admin.DevicePolicyManager: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)> C6
<android.app.admin.DevicePolicyManager: int setGlobalPrivateDnsModeSpecifiedHost(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void clearCrossProfileIntentFilters(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void reportSuccessfulBiometricAttempt(int)> C6
<android.app.admin.DevicePolicyManager: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)> C6
<android.app.admin.DevicePolicyManager: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)> C6
<android.app.admin.DevicePolicyManager: java.util.List retrieveSecurityLogs(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)> C6
<android.app.admin.DevicePolicyManager: void enableSystemApp(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void wipeData(int,java.lang.CharSequence)> C6
<android.app.admin.DevicePolicyManager: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)> C6
<android.app.admin.DevicePolicyManager: boolean setKeyguardDisabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setPermissionPolicy(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: boolean switchUser(android.content.ComponentName,android.os.UserHandle)> C6
<android.app.admin.DevicePolicyManager: void forceUpdateUserSetupComplete()> C6
<android.app.admin.DevicePolicyManager: java.util.List retrieveNetworkLogs(android.content.ComponentName,long)> C6
<android.app.admin.DevicePolicyManager: void setProfileOwnerCanAccessDeviceIds(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)> C6
<android.app.admin.DevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)> C6
<android.app.admin.DevicePolicyManager: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)> C6
<android.app.admin.DevicePolicyManager: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)> C6
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)> C6
<android.app.admin.DevicePolicyManager: void setOrganizationColor(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: boolean setResetPasswordToken(android.content.ComponentName,byte[])> C6
<android.app.admin.DevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setProfileEnabled(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)> C6
<android.app.admin.DevicePolicyManager: boolean approveCaCert(java.lang.String,int,boolean)> C6
<android.app.admin.DevicePolicyManager: void setOverrideApnsEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,int)> C6
<android.app.admin.DevicePolicyManager: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void reportKeyguardSecured(int)> C6
<android.app.admin.DevicePolicyManager: void reportSuccessfulPasswordAttempt(int)> C6
<android.app.admin.DevicePolicyManager: boolean requestBugreport(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.util.List,boolean)> C6
<android.app.admin.DevicePolicyManager: void setNetworkLoggingEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)> C6
<android.app.admin.DevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setAutoTimeEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setConfiguredNetworksLockdownState(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setForceEphemeralUsers(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)> C6
<android.app.admin.DevicePolicyManager: void setBackupServiceEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setAutoTimeZoneEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: boolean removeKeyPair(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: boolean installExistingPackage(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)> C6
<android.app.admin.DevicePolicyManager: android.security.AttestedKeyPair generateKeyPair(android.content.ComponentName,java.lang.String,android.security.keystore.KeyGenParameterSpec,int)> C6
<android.app.admin.DevicePolicyManager: boolean setTimeZone(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: boolean revokeKeyPairFromApp(android.content.ComponentName,java.lang.String,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setRequiredStrongAuthTimeout(android.content.ComponentName,long)> C6
<android.app.admin.DevicePolicyManager: int setGlobalPrivateDnsModeOpportunistic(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: int stopUser(android.content.ComponentName,android.os.UserHandle)> C6
<android.app.admin.DevicePolicyManager: void uninstallPackageWithActiveAdmins(java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void uninstallAllUserCaCerts(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void clearDeviceOwnerApp(java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void reportPasswordChanged(int)> C6
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void wipeData(int)> C6
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)> C6
<android.app.admin.DevicePolicyManager: void clearUserRestriction(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.Set)> C6
<android.app.admin.DevicePolicyManager: boolean grantKeyPairToApp(android.content.ComponentName,java.lang.String,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: java.util.List retrievePreRebootSecurityLogs(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void setOrganizationColorForUser(int,int)> C6
<android.app.admin.DevicePolicyManager: int checkProvisioningPreCondition(java.lang.String,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setScreenCaptureDisabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)> C6
<android.app.admin.DevicePolicyManager: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)> C6
<android.app.admin.DevicePolicyManager: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)> C6
<android.app.admin.DevicePolicyManager: boolean setActiveProfileOwner(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setFactoryResetProtectionPolicy(android.content.ComponentName,android.app.admin.FactoryResetProtectionPolicy)> C6
<android.app.admin.DevicePolicyManager: void setKeepUninstalledPackages(android.content.ComponentName,java.util.List)> C6
<android.app.admin.DevicePolicyManager: boolean removeOverrideApn(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setMasterVolumeMuted(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)> C6
<android.app.admin.DevicePolicyManager: void setPersonalAppsSuspended(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setCommonCriteriaModeEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void clearApplicationUserData(android.content.ComponentName,java.lang.String,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$OnClearApplicationUserDataListener)> C6
<android.app.admin.DevicePolicyManager: void reportFailedPasswordAttempt(int)> C6
<android.app.admin.DevicePolicyManager: long forceNetworkLogs()> C6
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void reboot(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)> C6
<android.app.admin.DevicePolicyManager: boolean installCaCert(android.content.ComponentName,byte[])> C6
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)> C6
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,boolean)> C6
<android.app.admin.DevicePolicyManager: void setAffiliationIds(android.content.ComponentName,java.util.Set)> C6
<android.app.admin.DevicePolicyManager: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: android.content.Intent createAdminSupportIntent(java.lang.String)> C6
<android.app.admin.DevicePolicyManager: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)> C6
<android.app.admin.DevicePolicyManager: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)> C6
<android.app.admin.DevicePolicyManager: void setCrossProfilePackages(android.content.ComponentName,java.util.Set)> C6
<android.app.admin.DevicePolicyManager: void setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.Set)> C6
<android.app.admin.DevicePolicyManager: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)> C6
<android.app.admin.DevicePolicyManager: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: boolean setTime(android.content.ComponentName,long)> C6
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void installSystemUpdate(android.content.ComponentName,android.net.Uri,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)> C6
<android.app.admin.DevicePolicyManager: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)> C6
<android.app.admin.DevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)> C6
<android.app.admin.DevicePolicyManager: void setProfileName(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: boolean clearResetPasswordToken(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void clearProfileOwner(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: void setAutoTimeRequired(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: void lockNow()> C6
<android.app.admin.DevicePolicyManager: void setManagedProfileMaximumTimeOff(android.content.ComponentName,long)> C6
<android.app.admin.DevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void reportKeyguardDismissed(int)> C6
<android.app.admin.DevicePolicyManager: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: int logoutUser(android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String[],boolean)> C6
<android.app.admin.DevicePolicyManager: void setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)> C6
<android.app.admin.DevicePolicyManager: void setDeviceProvisioningConfigApplied()> C6
<android.app.admin.DevicePolicyManager: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void addUserRestriction(android.content.ComponentName,java.lang.String)> C6
<android.app.admin.DevicePolicyManager: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)> C6
<android.app.admin.DevicePolicyManager: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)> C6
<android.app.admin.DevicePolicyManager: boolean removeUser(android.content.ComponentName,android.os.UserHandle)> C6
<android.app.admin.DevicePolicyManager: void uninstallCaCert(android.content.ComponentName,byte[])> C6
<android.app.admin.DevicePolicyManager: void setUserProvisioningState(int,int)> C6
<android.app.admin.DevicePolicyManager: void setLocationEnabled(android.content.ComponentName,boolean)> C6
<android.app.admin.DevicePolicyManager: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)> C6
<android.app.admin.DevicePolicyManager: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)> C6
<android.print.PrintManager: android.print.PrinterDiscoverySession createPrinterDiscoverySession()> C6
<android.print.PrintManager: android.print.PrintJob print(java.lang.String,android.print.PrintDocumentAdapter,android.print.PrintAttributes)> C6
<android.print.PrintManager: void addPrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener,android.os.Handler)> C6
<android.print.PrintManager: void addPrintJobStateChangeListener(android.print.PrintManager$PrintJobStateChangeListener)> C6
<android.print.PrintManager: void setPrintServiceEnabled(android.content.ComponentName,boolean)> C6
<android.print.PrintManager: void removePrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener)> C6
<android.print.PrintManager: void removePrintJobStateChangeListener(android.print.PrintManager$PrintJobStateChangeListener)> C6
<android.print.PrintManager: void addPrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener,android.os.Handler)> C6
<android.print.PrintManager: void removePrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener)> C6
<android.view.contentcapture.ContentCaptureManager: void removeData(android.view.contentcapture.DataRemovalRequest)> C6
<android.view.contentcapture.ContentCaptureManager: void shareData(android.view.contentcapture.DataShareRequest,java.util.concurrent.Executor,android.view.contentcapture.DataShareWriteAdapter)> C6
<android.view.contentcapture.ContentCaptureManager: void onActivityCreated(android.os.IBinder,android.content.ComponentName)> C6
<android.app.usage.NetworkStatsManager: void registerUsageCallback(int,java.lang.String,long,android.app.usage.NetworkStatsManager$UsageCallback,android.os.Handler)> C6
<android.app.usage.NetworkStatsManager: void registerUsageCallback(android.net.NetworkTemplate,int,long,android.app.usage.NetworkStatsManager$UsageCallback,android.os.Handler)> C6
<android.app.usage.NetworkStatsManager: void registerUsageCallback(int,java.lang.String,long,android.app.usage.NetworkStatsManager$UsageCallback)> C6
<android.content.pm.LauncherApps: boolean shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)> C6
<android.content.pm.LauncherApps: void startAppDetailsActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)> C6
<android.content.pm.LauncherApps: android.content.pm.LauncherActivityInfo resolveActivity(android.content.Intent,android.os.UserHandle)> C6
<android.content.pm.LauncherApps: void pinShortcuts(java.lang.String,java.util.List,android.os.UserHandle)> C6
<android.content.pm.LauncherApps: void startShortcut(android.content.pm.ShortcutInfo,android.graphics.Rect,android.os.Bundle)> C6
<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps$Callback,android.os.Handler)> C6
<android.content.pm.LauncherApps: void unregisterShortcutChangeCallback(android.content.pm.LauncherApps$ShortcutChangeCallback)> C6
<android.content.pm.LauncherApps: void startPackageInstallerSessionDetailsActivity(android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle)> C6
<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps$Callback)> C6
<android.content.pm.LauncherApps: void registerShortcutChangeCallback(android.content.pm.LauncherApps$ShortcutChangeCallback,android.content.pm.LauncherApps$ShortcutQuery,java.util.concurrent.Executor)> C6
<android.content.pm.LauncherApps: void startMainActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)> C6
<android.content.pm.LauncherApps: void uncacheShortcuts(java.lang.String,java.util.List,android.os.UserHandle,int)> C6
<android.content.pm.LauncherApps: void startShortcut(java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)> C6
<android.content.pm.LauncherApps: void registerPackageInstallerSessionCallback(java.util.concurrent.Executor,android.content.pm.PackageInstaller$SessionCallback)> C6
<android.content.pm.LauncherApps: void cacheShortcuts(java.lang.String,java.util.List,android.os.UserHandle,int)> C6
<android.app.slice.SliceManager: void pinSlice(android.net.Uri,java.util.List)> C6
<android.app.slice.SliceManager: void unpinSlice(android.net.Uri)> C6
<android.app.slice.SliceManager: void grantSlicePermission(java.lang.String,android.net.Uri)> C6
<android.app.slice.SliceManager: int checkSlicePermission(android.net.Uri,int,int)> C6
<android.app.slice.SliceManager: void pinSlice(android.net.Uri,java.util.Set)> C6
<android.app.slice.SliceManager: void enforceSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])> C6
<android.app.slice.SliceManager: void grantPermissionFromUser(android.net.Uri,java.lang.String,boolean)> C6
<android.app.slice.SliceManager: void revokeSlicePermission(java.lang.String,android.net.Uri)> C6
<android.view.autofill.AutofillManager: void disableOwnedAutofillServices()> C6
<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View,int,android.view.autofill.AutofillValue)> C6
<android.view.autofill.AutofillManager: void registerCallback(android.view.autofill.AutofillManager$AutofillCallback)> C6
<android.view.autofill.AutofillManager: void lambda$onVisibleForAutofill$0$AutofillManager()> C6
<android.view.autofill.AutofillManager: void setUserData(android.service.autofill.UserData)> C6
<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View,int)> C6
<android.view.autofill.AutofillManager: void requestAutofill(android.view.View,int,android.graphics.Rect)> C6
<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View,int)> C6
<android.view.autofill.AutofillManager: void onPendingSaveUi(int,android.os.IBinder)> C6
<android.view.autofill.AutofillManager: void unregisterCallback(android.view.autofill.AutofillManager$AutofillCallback)> C6
<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View,int,android.graphics.Rect)> C6
<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,int,boolean)> C6
<android.view.autofill.AutofillManager: void commit()> C6
<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View)> C6
<android.view.autofill.AutofillManager: void disableAutofillServices()> C6
<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View)> C6
<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View)> C6
<android.view.autofill.AutofillManager: void onCreate(android.os.Bundle)> C6
<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View)> C6
<android.view.autofill.AutofillManager: void onInvisibleForAutofill(boolean)> C6
<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,boolean)> C6
<android.view.autofill.AutofillManager: void onAuthenticationResult(int,android.content.Intent,android.view.View)> C6
<android.view.autofill.AutofillManager: void onActivityFinishing()> C6
<android.view.autofill.AutofillManager: void requestAutofill(android.view.View)> C6
<android.view.autofill.AutofillManager: void cancel()> C6
<android.view.autofill.AutofillManager: void setAugmentedAutofillWhitelist(java.util.Set,java.util.Set)> C6
<android.os.IBinder: void shellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)> C6
<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])> C6
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> C6
<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)> C6
<android.view.inputmethod.InputMethodManager: int dispatchInputEvent(android.view.InputEvent,java.lang.Object,android.view.inputmethod.InputMethodManager$FinishedInputEventCallback,android.os.Handler)> C6
<android.view.inputmethod.InputMethodManager: void showInputMethodPicker()> C6
<android.app.timedetector.TimeDetector: void suggestManualTime(android.app.timedetector.ManualTimeSuggestion)> C6
<android.app.timedetector.TimeDetector: void suggestNetworkTime(android.app.timedetector.NetworkTimeSuggestion)> C6
<android.app.timedetector.TimeDetector: void suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)> C6
<android.net.ConnectivityManager: void setAcceptPartialConnectivity(android.net.Network,boolean,boolean)> C6
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)> C6
<android.net.ConnectivityManager: void unregisterNetworkCallback(android.app.PendingIntent)> C6
<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)> C6
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,int)> C6
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler,int)> C6
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> C6
<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)> C6
<android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)> C6
<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)> C6
<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)> C6
<android.net.ConnectivityManager: void reportBadNetwork(android.net.Network)> C6
<android.net.ConnectivityManager: void unregisterNetworkProvider(android.net.NetworkProvider)> C6
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)> C6
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)> C6
<android.net.ConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)> C6
<android.net.ConnectivityManager: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)> C6
<android.net.ConnectivityManager: void reportInetCondition(int,int)> C6
<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)> C6
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,int,int,android.os.Handler,android.net.ConnectivityManager$NetworkCallback)> C6
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> C6
<android.net.ConnectivityManager: void setAcceptUnvalidated(android.net.Network,boolean,boolean)> C6
<android.net.ConnectivityManager: int registerNetworkProvider(android.net.NetworkProvider)> C6
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)> C6
<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)> C6
<android.net.ConnectivityManager: int registerNetworkFactory(android.os.Messenger,java.lang.String)> C6
<android.net.ConnectivityManager: void simulateDataStall(int,long,android.net.Network,android.os.PersistableBundle)> C6
<android.net.ConnectivityManager: boolean setAlwaysOnVpnPackageForUser(int,java.lang.String,boolean,java.util.List)> C6
<android.net.ConnectivityManager: void releaseNetworkRequest(android.app.PendingIntent)> C6
<android.net.ConnectivityManager: void unregisterNetworkFactory(android.os.Messenger)> C6
<android.net.ConnectivityManager: boolean updateLockdownVpn()> C6
<android.net.ConnectivityManager: void setAvoidUnvalidated(android.net.Network)> C6
<android.net.ConnectivityManager: void factoryReset()> C6
<android.telephony.MmsManager: void sendMultimediaMessage(int,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)> C6
<android.telephony.MmsManager: void downloadMultimediaMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)> C6
<android.app.contentsuggestions.ContentSuggestionsManager: void provideContextImage(int,android.os.Bundle)> C6
<android.app.contentsuggestions.ContentSuggestionsManager: void notifyInteraction(java.lang.String,android.os.Bundle)> C6
<android.app.contentsuggestions.ContentSuggestionsManager: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,java.util.concurrent.Executor,android.app.contentsuggestions.ContentSuggestionsManager$ClassificationsCallback)> C6
<android.app.contentsuggestions.ContentSuggestionsManager: void provideContextImage(android.graphics.Bitmap,android.os.Bundle)> C6
<android.app.contentsuggestions.ContentSuggestionsManager: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,java.util.concurrent.Executor,android.app.contentsuggestions.ContentSuggestionsManager$SelectionsCallback)> C6
<android.content.pm.CrossProfileApps: void startMainActivity(android.content.ComponentName,android.os.UserHandle)> C6
<android.content.pm.CrossProfileApps: void startActivity(android.content.ComponentName,android.os.UserHandle)> C6
<android.content.pm.CrossProfileApps: void startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity,android.os.Bundle)> C6
<android.content.pm.CrossProfileApps: void startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity)> C6
<android.content.pm.CrossProfileApps: void setInteractAcrossProfilesAppOp(java.lang.String,int)> C6
<android.content.ClipboardManager: void clearPrimaryClip()> C6
<android.content.ClipboardManager: void addPrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)> C6
<android.content.ClipboardManager: void removePrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)> C6
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)> C6
<android.content.ClipboardManager: void setText(java.lang.CharSequence)> C6
<android.text.ClipboardManager: void setText(java.lang.CharSequence)> C6
<android.os.BugreportManager: void cancelBugreport()> C6
<android.os.BugreportManager: void startBugreport(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.BugreportParams,java.util.concurrent.Executor,android.os.BugreportManager$BugreportCallback)> C6
<android.hardware.input.InputManager: void requestPointerCapture(android.os.IBinder,boolean)> C6
<android.companion.CompanionDeviceManager: void disassociate(java.lang.String)> C6
<android.companion.CompanionDeviceManager: void requestNotificationAccess(android.content.ComponentName)> C6
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)> C6
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)> C6
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)> C6
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)> C6
<android.view.LayoutInflater: android.view.View tryCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)> C6
<android.net.IpSecManager: android.net.IpSecManager$IpSecTunnelInterface createIpSecTunnelInterface(java.net.InetAddress,java.net.InetAddress,android.net.Network)> C6
<android.net.IpSecManager: android.net.IpSecManager$UdpEncapsulationSocket openUdpEncapsulationSocket(int)> C6
<android.net.IpSecManager: android.net.IpSecManager$SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress)> C6
<android.net.IpSecManager: void removeTransportModeTransforms(java.net.Socket)> C6
<android.net.IpSecManager: void applyTransportModeTransform(java.net.Socket,int,android.net.IpSecTransform)> C6
<android.net.IpSecManager: void applyTunnelModeTransform(android.net.IpSecManager$IpSecTunnelInterface,int,android.net.IpSecTransform)> C6
<android.net.IpSecManager: android.net.IpSecManager$SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress,int)> C6
<android.net.IpSecManager: void applyTransportModeTransform(java.net.DatagramSocket,int,android.net.IpSecTransform)> C6
<android.net.IpSecManager: void removeTransportModeTransforms(java.net.DatagramSocket)> C6
<android.net.IpSecManager: void applyTransportModeTransform(java.io.FileDescriptor,int,android.net.IpSecTransform)> C6
<android.net.IpSecManager: android.net.IpSecManager$UdpEncapsulationSocket openUdpEncapsulationSocket()> C6
<android.net.IpSecManager: void removeTransportModeTransforms(java.io.FileDescriptor)> C6
<android.os.IncidentManager: void deleteIncidentReports(android.net.Uri)> C6
<android.location.CountryDetector: void addCountryListener(android.location.CountryListener,android.os.Looper)> C6
<android.location.CountryDetector: void removeCountryListener(android.location.CountryListener)> C6
<android.location.CountryDetector: android.location.Country detectCountry()> C6
<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)> C6
<android.app.NotificationManager: void cancel(int)> C6
<android.app.NotificationManager: void createNotificationChannels(java.util.List)> C6
<android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)> C6
<android.app.NotificationManager: boolean areNotificationsEnabled()> C6
<android.app.NotificationManager: void disallowAssistantAdjustment(java.lang.String)> C6
<android.app.NotificationManager: void setNotificationDelegate(java.lang.String)> C6
<android.app.NotificationManager: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)> C6
<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)> C6
<android.app.NotificationManager: boolean removeAutomaticZenRules(java.lang.String)> C6
<android.app.NotificationManager: void notifyAsPackage(java.lang.String,java.lang.String,int,android.app.Notification)> C6
<android.app.NotificationManager: void cancelAsPackage(java.lang.String,java.lang.String,int)> C6
<android.app.NotificationManager: boolean matchesCallFilter(android.os.Bundle)> C6
<android.app.NotificationManager: void allowAssistantAdjustment(java.lang.String)> C6
<android.app.NotificationManager: void setNotificationAssistantAccessGranted(android.content.ComponentName,boolean)> C6
<android.app.NotificationManager: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)> C6
<android.app.NotificationManager: void deleteNotificationChannelGroup(java.lang.String)> C6
<android.app.NotificationManager: void notify(int,android.app.Notification)> C6
<android.app.NotificationManager: void setNotificationPolicy(android.app.NotificationManager$Policy)> C6
<android.app.NotificationManager: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)> C6
<android.app.NotificationManager: boolean shouldHideSilentStatusBarIcons()> C6
<android.app.NotificationManager: void cancelAll()> C6
<android.app.NotificationManager: void createNotificationChannelGroup(android.app.NotificationChannelGroup)> C6
<android.app.NotificationManager: void createNotificationChannelGroups(java.util.List)> C6
<android.app.NotificationManager: void cancel(java.lang.String,int)> C6
<android.app.NotificationManager: void deleteNotificationChannel(java.lang.String)> C6
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)> C6
<android.app.NotificationManager: boolean areBubblesAllowed()> C6
<android.app.NotificationManager: boolean removeAutomaticZenRule(java.lang.String)> C6
<android.app.NotificationManager: void setInterruptionFilter(int)> C6
<android.content.integrity.AppIntegrityManager: void updateRuleSet(android.content.integrity.RuleSet,android.content.IntentSender)> C6
<android.app.prediction.AppPredictionManager: android.app.prediction.AppPredictor createAppPredictionSession(android.app.prediction.AppPredictionContext)> C6
<android.hardware.display.ColorDisplayManager: boolean setAppSaturationLevel(java.lang.String,int)> C6
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.content.ComponentName)> C6
<android.media.AudioManager: void setMasterMute(boolean,int)> C6
<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)> C6
<android.media.AudioManager: void setMicrophoneMute(boolean)> C6
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)> C6
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,int,int)> C6
<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)> C6
<android.media.AudioManager: void requestAudioFocusForCall(int,int)> C6
<android.media.AudioManager: void unregisterMediaButtonIntent(android.app.PendingIntent)> C6
<android.media.AudioManager: void setMode(int)> C6
<android.media.AudioManager: void unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)> C6
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.content.ComponentName)> C6
<android.media.AudioManager: void setRingerMode(int)> C6
<android.media.AudioManager: void unregisterRemoteControlClient(android.media.RemoteControlClient)> C6
<android.media.AudioManager: void registerRemoteControlClient(android.media.RemoteControlClient)> C6
<android.media.AudioManager: int registerAudioPolicy(android.media.audiopolicy.AudioPolicy)> C6
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.app.PendingIntent)> C6
<android.media.AudioManager: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int)> C6
<android.media.AudioManager: void adjustStreamVolume(int,int,int)> C6
<android.media.AudioManager: void setMultiAudioFocusEnabled(boolean)> C6
<android.media.AudioManager: void setStreamMute(int,boolean)> C6
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)> C6
<android.media.AudioManager: void reloadAudioSettings()> C6
<android.media.AudioManager: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int)> C6
<android.media.AudioManager: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)> C6
<android.media.AudioManager: void setStreamVolume(int,int,int)> C6
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.app.PendingIntent)> C6
<android.media.AudioManager: void setDeviceVolumeBehavior(int,java.lang.String,int)> C6
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.util.UUID,java.lang.String,android.os.UserHandle)> C6
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,android.os.UserHandle)> C6
<android.app.usage.StorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,android.os.UserHandle)> C6
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.util.UUID,int)> C6
<android.app.usage.StorageStatsManager: java.util.Collection queryCratesForUser(java.util.UUID,android.os.UserHandle)> C6
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.util.UUID,android.os.UserHandle)> C6
<android.app.usage.StorageStatsManager: java.util.Collection queryCratesForPackage(java.util.UUID,java.lang.String,android.os.UserHandle)> C6
<android.app.usage.StorageStatsManager: java.util.Collection queryCratesForUid(java.util.UUID,int)> C6
<android.app.usage.StorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.util.UUID,android.os.UserHandle)> C6
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int)> C6
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.lang.String,android.os.UserHandle)> C6
<android.os.storage.StorageManager: void mount(java.lang.String)> C6
<android.os.storage.StorageManager: void destroyUserKey(int)> C6
<android.os.storage.StorageManager: boolean unmountObb(java.lang.String,boolean,android.os.storage.OnObbStateChangeListener)> C6
<android.os.storage.StorageManager: void partitionPrivate(java.lang.String)> C6
<android.os.storage.StorageManager: void unmount(java.lang.String)> C6
<android.os.storage.StorageManager: boolean mountObb(java.lang.String,java.lang.String,android.os.storage.OnObbStateChangeListener)> C6
<android.os.storage.StorageManager: void fixupAppDir(java.io.File)> C6
<android.os.storage.StorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,android.os.ProxyFileDescriptorCallback,android.os.Handler,java.util.concurrent.ThreadFactory)> C6
<android.os.storage.StorageManager: void format(java.lang.String)> C6
<android.os.storage.StorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,android.os.ProxyFileDescriptorCallback)> C6
<android.os.storage.StorageManager: void partitionMixed(java.lang.String,int)> C6
<android.os.storage.StorageManager: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)> C6
<android.os.storage.StorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,android.os.ProxyFileDescriptorCallback,android.os.Handler)> C6
<android.os.storage.StorageManager: void mkdirs(java.io.File)> C6
<android.os.storage.StorageManager: long benchmark(java.lang.String)> C6
<android.os.storage.StorageManager: void createUserKey(int,int,boolean)> C6
<android.os.storage.StorageManager: void partitionPublic(java.lang.String)> C6
<android.os.storage.StorageManager: void wipeAdoptableDisks()> C6
<android.os.storage.StorageManager: void benchmark(java.lang.String,android.os.IVoldTaskListener)> C6
<android.app.ActivityTaskManager: void removeStacksInWindowingModes(int[])> C6
<android.app.ActivityTaskManager: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)> C6
<android.app.ActivityTaskManager: void removeAllVisibleRecentTasks()> C6
<android.app.ActivityTaskManager: void moveTaskToStack(int,int,boolean)> C6
<android.app.ActivityTaskManager: boolean setTaskWindowingMode(int,int,boolean)> C6
<android.app.ActivityTaskManager: boolean setTaskWindowingModeSplitScreenPrimary(int,int,boolean,boolean,android.graphics.Rect,boolean)> C6
<android.app.ActivityTaskManager: void removeStacksWithActivityTypes(int[])> C6
<android.app.ActivityTaskManager: void resizeDockedStack(android.graphics.Rect,android.graphics.Rect)> C6
<android.net.wifi.nl80211.WifiNl80211Manager: void sendMgmtFrame(java.lang.String,byte[],int,java.util.concurrent.Executor,android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)> C6
<android.content.pm.DataLoaderManager: boolean bindToDataLoader(int,android.content.pm.DataLoaderParamsParcel,android.content.pm.IDataLoaderStatusListener)> C6
<android.net.nsd.NsdManager: void setEnabled(boolean)> C6
<android.media.soundtrigger.SoundTriggerManager: int unloadSoundModel(java.util.UUID)> C6
<android.media.soundtrigger.SoundTriggerManager: int stopRecognition(java.util.UUID)> C6
<android.media.soundtrigger.SoundTriggerManager: int startRecognition(java.util.UUID,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)> C6
<android.media.AudioRecord: int read(short[],int,int)> C2
<android.media.AudioRecord: int read(byte[],int,int)> C2
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)> C2
<android.media.MediaRecorder: void setVideoSource(int)> C2
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)> C2
<android.media.MediaRecorder: void start()> C2
<android.content.Context: void sendBroadcast(android.content.Intent)> C3
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)> C3
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> C3
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> C3
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> C3
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> C3
<android.content.Context: void startActivity(android.content.Intent)> C3
<android.content.ContextWrapper: void startActivity(android.content.Intent)> C3
<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)> C3
<android.content.Context: void startActivities(android.content.Intent[])> C3
<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)> C3
<android.content.Context: android.content.ComponentName startService(android.content.Intent)> C3
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> C3
<android.app.Activity: void setResult(int,android.content.Intent)> C3
<android.app.Activity: void startActivity(android.content.Intent)> C3
<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)> C3
<android.app.Activity: void startActivities(android.content.Intent[])> C3
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)> C3
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> C3
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> C3
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)> C3
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> C3
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)> C3
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> C3
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)> C3
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int)> C3
<android.app.Activity: android.content.ComponentName startService(android.content.Intent)> C3
<android.app.Activity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> C3
<android.app.Activity: void sendBroadcast(android.content.Intent)> C3
<android.app.Activity: void sendBroadcast(android.content.Intent,java.lang.String)> C3
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> C3
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> C3
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> C3
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> C3
<android.app.Activity: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> C3
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)> C3
<android.app.Activity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> C3
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> C3
<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> C3
<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> C5
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,com.alibaba.fastjson.TypeReference,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.lang.Object parse(byte[],com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class)> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(char[],int,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.reflect.Type,int,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.lang.Object parse(java.lang.String,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSONObject parseObject(java.lang.String,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.lang.Object parse(java.lang.String)> C7
<com.alibaba.fastjson.JSON: java.util.List parseArray(java.lang.String,java.lang.reflect.Type[])> C7
<com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSONArray parseArray(java.lang.String)> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(byte[],java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSONObject parseObject(java.lang.String)> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.lang.Object parse(java.lang.String,int)> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.reflect.Type,com.alibaba.fastjson.parser.ParserConfig,int,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.reflect.Type,com.alibaba.fastjson.parser.deserializer.ParseProcess,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.util.List parseArray(java.lang.String,java.lang.Class)> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.reflect.Type,com.alibaba.fastjson.parser.ParserConfig,com.alibaba.fastjson.parser.deserializer.ParseProcess,int,com.alibaba.fastjson.parser.Feature[])> C7
<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class,com.alibaba.fastjson.parser.deserializer.ParseProcess,com.alibaba.fastjson.parser.Feature[])> C7
<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.Class)> C7
<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)> C7
<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)> C7
<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)> C7
<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)> C7
<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.Class)> C7
<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(byte[],com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.DataInput,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(byte[],int,int,com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.File,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.net.URL,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.MappingIterator readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.MappingIterator readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.net.URL,com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.util.Iterator readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.util.Iterator readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.net.URL,com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(byte[],com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(byte[],int,int,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.DataInput,com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.InputStream,com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(byte[],int,int,com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.MappingIterator readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(byte[],java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.InputStream,com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.Reader,com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.Reader,com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.File,com.fasterxml.jackson.core.type.TypeReference)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.File,com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.MappingIterator readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.InputStream,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.Reader,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)> C7
<com.fasterxml.jackson.databind.ObjectMapper: java.util.Iterator readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)> C7
