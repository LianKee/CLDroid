<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.os.image.DynamicSystemManager: boolean remove()>
<android.os.UserManager: void addUserRestrictionsListener(android.os.IUserRestrictionsListener)>
<android.app.WallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
<android.app.role.RoleManager: boolean addRoleHolderFromController(java.lang.String,java.lang.String)>
<android.app.role.RoleManager: boolean removeRoleHolderFromController(java.lang.String,java.lang.String)>
<android.app.role.RoleManager: void setRoleNamesFromController(java.util.List)>
<android.os.PowerManager: void suppressAmbientDisplay(java.lang.String,boolean)>
<android.os.PowerManager: boolean setDynamicPowerSaveHint(boolean,int)>
<android.os.PowerManager: void wakeUp(long)>
<android.os.PowerManager: void userActivity(long,int,int)>
<android.os.PowerManager: void userActivity(long,boolean)>
<android.os.PowerManager: void wakeUp(long,int,java.lang.String)>
<android.os.PowerManager: void reboot(java.lang.String)>
<android.os.PowerManager: void wakeUp(long,java.lang.String)>
<android.os.PowerManager: boolean setAdaptivePowerSaveEnabled(boolean)>
<android.os.PowerManager: boolean setPowerSaveModeEnabled(boolean)>
<android.os.PowerManager: boolean forceSuspend()>
<android.os.PowerManager: void dream(long)>
<android.os.PowerManager: void setDozeAfterScreenOff(boolean)>
<android.os.PowerManager: void goToSleep(long,int,int)>
<android.os.PowerManager: void rebootSafeMode()>
<android.os.PowerManager: void boostScreenBrightness(long)>
<android.os.PowerManager: void shutdown(boolean,java.lang.String,boolean)>
<android.os.PowerManager: void nap(long)>
<android.os.PowerManager: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)>
<android.os.PowerManager: void goToSleep(long)>
<android.hardware.ConsumerIrManager: void transmit(int,int[])>
<android.app.ActivityManager: void setProcessStateSummary(byte[])>
<android.app.ActivityManager: void setWatchHeapLimit(long)>
<android.app.ActivityManager: void registerHomeVisibilityObserver(android.app.HomeVisibilityObserver)>
<android.app.ActivityManager: void noteWakeupAlarm(android.app.PendingIntent,android.os.WorkSource,int,java.lang.String,java.lang.String)>
<android.app.ActivityManager: void setDeviceLocales(android.os.LocaleList)>
<android.app.ActivityManager: void setPersistentVrThread(int)>
<android.app.ActivityManager: void clearWatchHeapLimit()>
<android.app.ActivityManager: void broadcastStickyIntent(android.content.Intent,int,int)>
<android.app.ActivityManager: void noteAlarmFinish(android.app.PendingIntent,android.os.WorkSource,int,java.lang.String)>
<android.app.ActivityManager: void scheduleApplicationInfoChanged(java.util.List,int)>
<android.app.ActivityManager: void killProcessesWhenImperceptible(int[],java.lang.String)>
<android.app.ActivityManager: void broadcastStickyIntent(android.content.Intent,int)>
<android.app.ActivityManager: void clearGrantedUriPermissions(java.lang.String)>
<android.app.ActivityManager: void addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)>
<android.app.ActivityManager: void noteAlarmStart(android.app.PendingIntent,android.os.WorkSource,int,java.lang.String)>
<android.app.ActivityManager: void killUid(int,java.lang.String)>
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)>
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)>
<android.app.DreamManager: void stopDream()>
<android.app.DreamManager: void startDream(android.content.ComponentName)>
<android.hardware.display.DisplayManager: void startWifiDisplayScan()>
<android.hardware.display.DisplayManager: void resumeWifiDisplay()>
<android.hardware.display.DisplayManager: void setSaturationLevel(float)>
<android.hardware.display.DisplayManager: void pauseWifiDisplay()>
<android.hardware.display.DisplayManager: void renameWifiDisplay(java.lang.String,java.lang.String)>
<android.hardware.display.DisplayManager: void setTemporaryAutoBrightnessAdjustment(float)>
<android.hardware.display.DisplayManager: void connectWifiDisplay(java.lang.String)>
<android.hardware.display.DisplayManager: void forgetWifiDisplay(java.lang.String)>
<android.hardware.display.DisplayManager: void stopWifiDisplayScan()>
<android.hardware.display.DisplayManager: void setTemporaryBrightness(float)>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,java.lang.CharSequence,android.app.KeyguardManager$KeyguardDismissCallback)>
<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,android.app.KeyguardManager$KeyguardDismissCallback)>
<android.app.KeyguardManager: boolean setLock(int,byte[],int)>
<android.net.NetworkScoreManager: void disableScoring()>
<android.net.NetworkScoreManager: boolean requestScores(java.util.Collection)>
<android.net.NetworkScoreManager: void registerNetworkScoreCallback(int,int,java.util.concurrent.Executor,android.net.NetworkScoreManager$NetworkScoreCallback)>
<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,android.net.INetworkScoreCache)>
<android.net.NetworkScoreManager: boolean clearScores()>
<android.net.NetworkScoreManager: boolean requestScores(android.net.NetworkKey[])>
<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>
<android.net.NetworkScoreManager: void unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)>
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback)>
<android.media.MediaRouter: void selectRouteInt(int,android.media.MediaRouter$RouteInfo,boolean)>
<android.media.MediaRouter: void removeCallback(android.media.MediaRouter$Callback)>
<android.media.MediaRouter: void removeRouteInt(android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter: void addRouteInt(android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter: void addUserRoute(android.media.MediaRouter$UserRouteInfo)>
<android.media.MediaRouter: void clearUserRoutes()>
<android.media.MediaRouter: void selectRoute(int,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter: void rebindAsUser(int)>
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback,int)>
<android.media.MediaRouter: void removeUserRoute(android.media.MediaRouter$UserRouteInfo)>
<android.media.MediaRouter: void setRouterGroupId(java.lang.String)>
<android.media.MediaRouter: void <init>(android.content.Context)>
<android.permission.PermissionManager: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.permission.PermissionManager: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.permission.PermissionManager: void setRuntimePermissionsVersion(int)>
<android.permission.PermissionManager: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.permission.PermissionManager: void grantDefaultPermissionsToLuiApp(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.permission.PermissionManager: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.permission.PermissionManager: void startOneTimePermissionSession(java.lang.String,long,int,int)>
<android.permission.PermissionManager: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.permission.PermissionManager: void stopOneTimePermissionSession(java.lang.String)>
<android.hardware.SerialManager: android.hardware.SerialPort openSerialPort(java.lang.String,int)>
<android.media.session.MediaSessionManager: void dispatchMediaKeyEvent(android.view.KeyEvent,boolean)>
<android.media.session.MediaSessionManager: void dispatchMediaKeyEvent(android.view.KeyEvent)>
<android.media.session.MediaSessionManager: void dispatchMediaKeyEventAsSystemService(android.view.KeyEvent)>
<android.app.UriGrantsManager: void clearGrantedUriPermissions(java.lang.String)>
<android.app.AppOpsManager: int checkAudioOp(int,int,int,java.lang.String)>
<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String)>
<android.app.AppOpsManager: void finishOp(int,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: void clearHistory()>
<android.app.AppOpsManager: int noteProxyOp(int,java.lang.String)>
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>
<android.app.AppOpsManager: int noteOp(int,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean)>
<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(int,int,java.lang.String)>
<android.app.AppOpsManager: void setRestriction(int,int,int,java.lang.String[])>
<android.app.AppOpsManager: void setUserRestrictionForUser(int,boolean,android.os.IBinder,java.lang.String[],int)>
<android.app.AppOpsManager: void offsetHistory(long)>
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int)>
<android.app.AppOpsManager: int checkOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void startWatchingStarted(int[],android.app.AppOpsManager$OnOpStartedListener)>
<android.app.AppOpsManager: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()>
<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int startOp(int)>
<android.app.AppOpsManager: int unsafeCheckOpRaw(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String)>
<android.app.AppOpsManager: void setOnOpNotedCallback(java.util.concurrent.Executor,android.app.AppOpsManager$OnOpNotedCallback)>
<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>
<android.app.AppOpsManager: int checkOp(int,int,java.lang.String)>
<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int checkOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)>
<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>
<android.app.AppOpsManager: void setNotedAppOpsCollector(android.app.AppOpsManager$AppOpsCollector)>
<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>
<android.app.AppOpsManager: int startOp(int,int,java.lang.String)>
<android.app.AppOpsManager: int unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void finishOp(int)>
<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void setUserRestriction(int,boolean,android.os.IBinder)>
<android.app.AppOpsManager: void resetHistoryParameters()>
<android.app.AppOpsManager: void setUserRestriction(int,boolean,android.os.IBinder,java.lang.String[])>
<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int noteOp(int)>
<android.app.AppOpsManager: void setMode(java.lang.String,int,java.lang.String,int)>
<android.app.AppOpsManager: void setHistoryParameters(int,long,int)>
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteProxyOpNoThrow(int,java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: void startWatchingActive(int[],android.app.AppOpsManager$OnOpActiveChangedListener)>
<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int unsafeCheckOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int checkAudioOpNoThrow(int,int,int,java.lang.String)>
<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean)>
<android.app.AppOpsManager: void startWatchingActive(java.lang.String[],java.util.concurrent.Executor,android.app.AppOpsManager$OnOpActiveChangedListener)>
<android.app.AppOpsManager: void finishOp(int,int,java.lang.String)>
<android.app.AppOpsManager: void startWatchingNoted(int[],android.app.AppOpsManager$OnOpNotedListener)>
<android.app.AppOpsManager: int noteProxyOp(int,java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean,android.graphics.Rect)>
<android.app.SearchManager: void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)>
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)>
<android.app.usage.UsageStatsManager: void registerAppUsageObserver(int,java.lang.String[],long,java.util.concurrent.TimeUnit,android.app.PendingIntent)>
<android.app.usage.UsageStatsManager: void registerAppUsageLimitObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent)>
<android.app.usage.UsageStatsManager: void unregisterUsageSessionObserver(int)>
<android.app.usage.UsageStatsManager: void unregisterAppUsageLimitObserver(int)>
<android.app.usage.UsageStatsManager: void unregisterAppUsageObserver(int)>
<android.app.usage.UsageStatsManager: void registerUsageSessionObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent,android.app.PendingIntent)>
<android.app.usage.UsageStatsManager: void setAppStandbyBuckets(java.util.Map)>
<android.app.usage.UsageStatsManager: void setAppStandbyBucket(java.lang.String,int)>
<android.app.usage.UsageStatsManager: void onCarrierPrivilegedAppsChanged()>
<android.app.AlarmManager: void setTimeZone(java.lang.String)>
<android.app.AlarmManager: void setTime(long)>
<android.app.StatusBarManager: void expandSettingsPanel(java.lang.String)>
<android.app.StatusBarManager: void expandNotificationsPanel()>
<android.app.StatusBarManager: void setDisabledForSetup(boolean)>
<android.app.StatusBarManager: void expandSettingsPanel()>
<android.app.StatusBarManager: void removeIcon(java.lang.String)>
<android.app.StatusBarManager: void setDisabledForSimNetworkLock(boolean)>
<android.app.StatusBarManager: void disable(int)>
<android.app.StatusBarManager: void collapsePanels()>
<android.app.StatusBarManager: void setIcon(java.lang.String,int,int,java.lang.String)>
<android.app.StatusBarManager: void disable2(int)>
<android.app.StatusBarManager: void setIconVisibility(java.lang.String,boolean)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,android.location.LocationListener)>
<android.location.LocationManager: void setExtraLocationControllerPackageEnabled(boolean)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: void setLocationControllerExtraPackageEnabled(boolean)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)>
<android.location.LocationManager: boolean unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.location.LocationManager: void setExtraLocationControllerPackage(java.lang.String)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>
<android.location.LocationManager: boolean registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,java.util.concurrent.Executor,android.location.LocationListener)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.location.LocationManager: void setLocationControllerExtraPackage(java.lang.String)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: void flushGnssBatch()>
<android.os.RecoverySystem: void prepareForUnattendedUpdate(android.content.Context,java.lang.String,android.content.IntentSender)>
<android.os.RecoverySystem: void rebootWipeCache(android.content.Context,java.lang.String)>
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean,java.lang.String,boolean,boolean)>
<android.os.RecoverySystem: void rebootWipeCache(android.content.Context)>
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File,boolean)>
<android.os.RecoverySystem: void processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)>
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,java.lang.String)>
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File)>
<android.os.RecoverySystem: void processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)>
<android.os.RecoverySystem: void clearPrepareForUnattendedUpdate(android.content.Context)>
<android.os.RecoverySystem: void cancelScheduledUpdate(android.content.Context)>
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean,java.lang.String,boolean)>
<android.os.RecoverySystem: void scheduleUpdateOnBoot(android.content.Context,java.io.File)>
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean)>
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context)>
<android.os.RecoverySystem: void rebootWipeAb(android.content.Context,java.io.File,java.lang.String)>
<android.os.RecoverySystem: void rebootPromptAndWipeUserData(android.content.Context,java.lang.String)>
<android.hardware.fingerprint.FingerprintManager: void rename(int,int,java.lang.String)>
<android.hardware.biometrics.BiometricManager: void resetLockout(byte[])>
<android.hardware.biometrics.BiometricManager: void setActiveUser(int)>
<android.hardware.biometrics.BiometricManager: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
<android.content.rollback.RollbackManager: void blockRollbackManager(long)>
<android.content.rollback.RollbackManager: void reloadPersistedData()>
<android.app.admin.DevicePolicyManager: void notifyPendingSystemUpdate(long,boolean)>
<android.app.admin.DevicePolicyManager: void notifyPendingSystemUpdate(long)>
<android.hardware.SensorPrivacyManager: void setSensorPrivacy(boolean)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats querySummary(android.net.NetworkTemplate,long,long)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTag(int,java.lang.String,long,long,int,int)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTagState(android.net.NetworkTemplate,long,long,int,int,int)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTagState(int,java.lang.String,long,long,int,int,int)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetails(int,java.lang.String,long,long)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(int,java.lang.String,long,long,int)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForUser(int,java.lang.String,long,long)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(android.net.NetworkTemplate,long,long,int)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForDevice(int,java.lang.String,long,long)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForDevice(android.net.NetworkTemplate,long,long)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats querySummary(int,java.lang.String,long,long)>
<android.hardware.lights.LightsManager: android.hardware.lights.LightsManager$LightsSession openSession()>
<android.os.BatteryManager: boolean setChargingStateUpdateDelayMillis(int)>
<android.view.inputmethod.InputMethodManager: void reportPerceptible(android.os.IBinder,boolean)>
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethodManager: void showInputMethodPickerFromSystem(boolean,int)>
<android.view.inputmethod.InputMethodManager: void lambda$startInputInner$1$InputMethodManager(int)>
<android.view.inputmethod.InputMethodManager: boolean requestImeShow(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: void showSoftInputUnchecked(int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>
<android.net.NetworkWatchlistManager: void reloadWatchlist()>
<android.net.ConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)>
<android.net.ConnectivityManager: void startCaptivePortalApp(android.net.Network,android.os.Bundle)>
<android.net.ConnectivityManager: android.net.ConnectivityManager$PacketKeepalive startNattKeepalive(android.net.Network,int,android.net.ConnectivityManager$PacketKeepaliveCallback,java.net.InetAddress,int,java.net.InetAddress)>
<android.net.ConnectivityManager: void enforceChangePermission(android.content.Context)>
<android.app.UiModeManager: void setNightMode(int)>
<android.app.UiModeManager: void setCustomNightModeStart(java.time.LocalTime)>
<android.app.UiModeManager: void enableCarMode(int)>
<android.app.UiModeManager: void setCustomNightModeEnd(java.time.LocalTime)>
<android.app.UiModeManager: void enableCarMode(int,int)>
<android.app.UiModeManager: void disableCarMode(int)>
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeMyUidSnapshot()>
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeUidSnapshot(int)>
<android.os.health.SystemHealthManager: android.os.health.HealthStats[] takeUidSnapshots(int[])>
<android.os.BugreportManager: void requestBugreport(android.os.BugreportParams,java.lang.CharSequence,java.lang.CharSequence)>
<android.hardware.usb.UsbManager: void setCurrentFunctions(long)>
<android.hardware.usb.UsbManager: void resetUsbGadget()>
<android.hardware.usb.UsbManager: void setScreenUnlockedFunctions(long)>
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice)>
<android.hardware.usb.UsbManager: void setUsbDeviceConnectionHandler(android.content.ComponentName)>
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice,java.lang.String)>
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice,int)>
<android.hardware.input.InputManager: void registerOnTabletModeChangedListener(android.hardware.input.InputManager$OnTabletModeChangedListener,android.os.Handler)>
<android.hardware.input.InputManager: void tryPointerSpeed(int)>
<android.hardware.input.InputManager: android.view.InputMonitor monitorGestureInput(java.lang.String,int)>
<android.hardware.input.InputManager: void disableInputDevice(int)>
<android.hardware.input.InputManager: void setTouchCalibration(java.lang.String,int,android.hardware.input.TouchCalibration)>
<android.hardware.input.InputManager: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<android.hardware.input.InputManager: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<android.hardware.input.InputManager: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<android.hardware.input.InputManager: void enableInputDevice(int)>
<android.hardware.input.InputManager: void addPortAssociation(java.lang.String,int)>
<android.hardware.input.InputManager: void removePortAssociation(java.lang.String)>
<android.companion.CompanionDeviceManager: void associate(android.companion.AssociationRequest,android.companion.CompanionDeviceManager$Callback,android.os.Handler)>
<android.media.midi.MidiManager: android.media.midi.MidiDeviceServer createDeviceServer(android.media.midi.MidiReceiver[],int,java.lang.String[],java.lang.String[],android.os.Bundle,int,android.media.midi.MidiDeviceServer$Callback)>
<android.app.trust.TrustManager: void reportEnabledTrustAgentsChanged(int)>
<android.app.trust.TrustManager: void clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType)>
<android.app.trust.TrustManager: void setDeviceLockedForUser(int,boolean)>
<android.app.trust.TrustManager: void reportUnlockLockout(int,int)>
<android.app.trust.TrustManager: void unregisterTrustListener(android.app.trust.TrustManager$TrustListener)>
<android.app.trust.TrustManager: void unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)>
<android.app.trust.TrustManager: void reportKeyguardShowingChanged()>
<android.app.trust.TrustManager: void reportUnlockAttempt(boolean,int)>
<android.app.trust.TrustManager: void registerTrustListener(android.app.trust.TrustManager$TrustListener)>
<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewManager: void removeView(android.view.View)>
<android.view.WindowManager: void removeViewImmediate(android.view.View)>
<android.os.IncidentManager: void cancelAuthorization(android.os.IncidentManager$AuthListener)>
<android.os.IncidentManager: void approveReport(android.net.Uri)>
<android.os.IncidentManager: void requestAuthorization(int,java.lang.String,int,android.os.IncidentManager$AuthListener)>
<android.os.IncidentManager: void requestAuthorization(int,java.lang.String,int,java.util.concurrent.Executor,android.os.IncidentManager$AuthListener)>
<android.os.IncidentManager: void denyReport(android.net.Uri)>
<android.view.accessibility.AccessibilityManager: void removeAccessibilityInteractionConnection(android.view.IWindow)>
<android.view.accessibility.AccessibilityManager: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityManager: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
<android.view.accessibility.AccessibilityManager: void disassociateEmbeddedHierarchy(android.os.IBinder)>
<android.view.accessibility.AccessibilityManager: void registerSystemAction(android.app.RemoteAction,int)>
<android.view.accessibility.AccessibilityManager: void notifyAccessibilityButtonClicked(int,java.lang.String)>
<android.view.accessibility.AccessibilityManager: void performAccessibilityShortcut(java.lang.String)>
<android.view.accessibility.AccessibilityManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,java.lang.String,android.view.accessibility.IAccessibilityInteractionConnection)>
<android.view.accessibility.AccessibilityManager: void notifyAccessibilityButtonVisibilityChanged(boolean)>
<android.view.accessibility.AccessibilityManager: void performAccessibilityShortcut()>
<android.view.accessibility.AccessibilityManager: boolean sendFingerprintGesture(int)>
<android.view.accessibility.AccessibilityManager: void associateEmbeddedHierarchy(android.os.IBinder,android.os.IBinder)>
<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context,android.view.accessibility.IAccessibilityManager,int)>
<android.view.accessibility.AccessibilityManager: void notifyAccessibilityButtonClicked(int)>
<android.view.accessibility.AccessibilityManager: void unregisterSystemAction(int)>
<android.view.accessibility.AccessibilityManager: void <init>(android.os.Handler,android.view.accessibility.IAccessibilityManager,int)>
<android.view.accessibility.AccessibilityManager: void interrupt()>
<android.app.NotificationManager: void setNotificationListenerAccessGrantedForUser(android.content.ComponentName,int,boolean)>
<android.app.NotificationManager: void setNotificationListenerAccessGranted(android.content.ComponentName,boolean)>
<android.app.NotificationManager: void setZenMode(int,android.net.Uri,java.lang.String)>
<android.app.NotificationManager: void setNotificationPolicyAccessGranted(java.lang.String,boolean)>
<android.media.projection.MediaProjectionManager: void stopActiveProjection()>
<android.media.projection.MediaProjectionManager: void addCallback(android.media.projection.MediaProjectionManager$Callback,android.os.Handler)>
<android.media.projection.MediaProjectionManager: void removeCallback(android.media.projection.MediaProjectionManager$Callback)>
<android.hardware.display.ColorDisplayManager: boolean setDisplayWhiteBalanceEnabled(boolean)>
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayActivated(boolean)>
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayCustomStartTime(java.time.LocalTime)>
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayCustomEndTime(java.time.LocalTime)>
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayAutoMode(int)>
<android.hardware.display.ColorDisplayManager: boolean setSaturationLevel(int)>
<android.hardware.display.ColorDisplayManager: void setColorMode(int)>
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayColorTemperature(int)>
<android.media.AudioManager: void setRingerModeInternal(int)>
<android.media.AudioManager: void setMicrophoneMuteFromSwitch(boolean)>
<android.media.AudioManager: void startBluetoothScoVirtualCall()>
<android.media.AudioManager: void addOnPreferredDeviceForStrategyChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)>
<android.media.AudioManager: void dispatchMediaKeyEvent(android.view.KeyEvent)>
<android.media.AudioManager: void startBluetoothSco()>
<android.media.AudioManager: void stopBluetoothSco()>
<android.media.AudioManager: void registerAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback,android.os.Handler)>
<android.media.AudioManager: void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback,android.os.Handler)>
<android.media.AudioManager: void forceVolumeControlStream(int)>
<android.media.AudioManager: void removeOnPreferredDeviceForStrategyChangedListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)>
<android.media.AudioManager: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
<android.media.AudioManager: void setRttEnabled(boolean)>
<android.media.AudioManager: void setAudioServerStateCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioServerStateCallback)>
<android.media.AudioManager: void disableSafeMediaVolume()>
<android.media.AudioManager: boolean setPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy,android.media.AudioDeviceAttributes)>
<android.media.AudioManager: void setSupportedSystemUsages(int[])>
<android.media.AudioManager: void setVolumeController(android.media.IVolumeController)>
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes)>
<android.media.AudioManager: void clearAudioServerStateCallback()>
<android.media.AudioManager: boolean removePreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)>
<android.media.AudioManager: void abandonAudioFocusForCall()>
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)>
<android.media.AudioManager: void setVolumePolicy(android.media.VolumePolicy)>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.media.AudioManager: void unregisterAudioPolicy(android.media.audiopolicy.AudioPolicy)>
<android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)>
<android.os.Vibrator: void cancel()>
<android.os.Vibrator: void vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.media.AudioAttributes)>
<android.os.storage.StorageManager: boolean checkPermissionAndCheckOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,int)>
<android.os.storage.StorageManager: void forgetVolume(java.lang.String)>
<android.os.storage.StorageManager: boolean checkPermissionReadAudio(boolean,int,int,java.lang.String,java.lang.String)>
<android.os.storage.StorageManager: void prepareUserStorage(java.lang.String,int,int,int)>
<android.os.storage.StorageManager: boolean checkPermissionWriteAudio(boolean,int,int,java.lang.String,java.lang.String)>
<android.os.storage.StorageManager: void lockUserKey(int)>
<android.os.storage.StorageManager: void setVolumeNickname(java.lang.String,java.lang.String)>
<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long)>
<android.os.storage.StorageManager: void setVolumeInited(java.lang.String,boolean)>
<android.os.storage.StorageManager: void unlockUserKey(int,int,byte[],byte[])>
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long)>
<android.os.storage.StorageManager: void setVolumeSnoozed(java.lang.String,boolean)>
<android.os.storage.StorageManager: boolean checkPermissionWriteVideo(boolean,int,int,java.lang.String,java.lang.String)>
<android.os.storage.StorageManager: boolean checkPermissionReadVideo(boolean,int,int,java.lang.String,java.lang.String)>
<android.os.storage.StorageManager: boolean checkPermissionAndAppOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)>
<android.os.storage.StorageManager: boolean checkPermissionReadImages(boolean,int,int,java.lang.String,java.lang.String)>
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long,int)>
<android.os.storage.StorageManager: void destroyUserStorage(java.lang.String,int,int)>
<android.os.storage.StorageManager: boolean checkPermissionWriteImages(boolean,int,int,java.lang.String,java.lang.String)>
<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long,int)>
<android.app.ActivityTaskManager: void clearLaunchParamsForPackages(java.util.List)>
<android.app.ActivityTaskManager: void startSystemLockTaskMode(int)>
<android.app.ActivityTaskManager: void requestPictureInPictureMode(android.os.IBinder)>
<android.app.ActivityTaskManager: void setDisplayToSingleTaskInstance(int)>
<android.app.ActivityTaskManager: void stopSystemLockTaskMode()>
<android.app.ActivityTaskManager: void resizeTask(int,android.graphics.Rect)>
<android.os.BatteryStatsManager: void reportWifiOff()>
<android.os.BatteryStatsManager: void reportWifiOn()>
<android.os.BatteryStatsManager: void reportWifiSupplicantStateChanged(int,boolean)>
<android.os.BatteryStatsManager: void reportWifiScanStoppedFromSource(android.os.WorkSource)>
<android.os.BatteryStatsManager: void reportWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>
<android.os.BatteryStatsManager: void reportWifiState(int,java.lang.String)>
<android.os.BatteryStatsManager: void reportWifiBatchedScanStoppedFromSource(android.os.WorkSource)>
<android.os.BatteryStatsManager: void reportFullWifiLockReleasedFromSource(android.os.WorkSource)>
<android.os.BatteryStatsManager: void reportWifiMulticastEnabled(android.os.WorkSource)>
<android.os.BatteryStatsManager: void reportFullWifiLockAcquiredFromSource(android.os.WorkSource)>
<android.os.BatteryStatsManager: void reportWifiRssiChanged(int)>
<android.os.BatteryStatsManager: void reportWifiMulticastDisabled(android.os.WorkSource)>
<android.os.BatteryStatsManager: void reportWifiScanStartedFromSource(android.os.WorkSource)>
<android.media.soundtrigger.SoundTriggerManager: void deleteModel(java.util.UUID)>
<android.media.soundtrigger.SoundTriggerManager: void updateModel(android.media.soundtrigger.SoundTriggerManager$Model)>
<android.media.soundtrigger.SoundTriggerManager: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(java.util.UUID,int)>
<android.media.soundtrigger.SoundTriggerManager: int loadSoundModel(android.hardware.soundtrigger.SoundTrigger$SoundModel)>
<android.media.soundtrigger.SoundTriggerManager: int setParameter(java.util.UUID,int,int)>
